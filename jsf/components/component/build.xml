<!--
  ~ Copyright 2004-2012 ICEsoft Technologies Canada Corp.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the
  ~ License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an "AS
  ~ IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied. See the License for the specific language
  ~ governing permissions and limitations under the License.
  -->

<project name="icefaces-mobi" default="lib" basedir=".">
	<description>
        ICEfaces Mobile Components.
    </description>

	<property name="compile.source" value="1.5" />
	<property name="compile.target" value="1.5" />
	<property name="compile.debug" value="true" />

	<!-- This property file is only used for EE builds and overrides various
         property values if it is available. -->

	<property file="./build.properties" />
	<property file="../build.properties" />
	<property file="../../build.properties" />
	<property file="../../../build.properties" />


	<property name="lib.dir" location="../../../lib" />
	<property name="core.dir" location="../../../core/src/main/java"/>
	<property name="src" location="src" />
	<property name="resources" location="resources" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="conf" location="conf" />
	<property name="bin" location="bin/" />
	<property name="exploded" location="${build}/exploded" />
	<property name="doc" location="${build}/doc" />
	<property name="tld.doc" location="${doc}/tld" />
	<property name="java.doc" location="${doc}/javadoc" />
	<property name="tld.file" location="${build}/exploded/META-INF/components.tld" />
	<property name="tld.jar" location="${lib.dir}" />
	<property name="smartsprites.basedir" location="${lib.dir}/generator/tools/smartsprites" />
	<property name="javadocs.dir" location="${build}/docs" />
	<property name="root.dir.path" location="${build}/skins/in" />
	<property name="output.dir.path" location="${build}/skins/out" />
	<property name="resource.js.dir" location="${resources}/org.icefaces.component.util" />
	<property name="shared.js.dir" location="../../../resources/javascript" />
	<property name="combined.js" location="${resources}/org.icefaces.component.util/combined-min.js" />
	<property name="combined.js.tmp" location="${resource.js.dir}/combined.js" />
	<!-- theme import location -->
	<property name="theme.dir.path" location="../../../resources/themes" />
	<property name="theme.base.dir" value="base" />
	<property name="theme.base3.dir" value="base3" />
	<!-- Check if release.type is set, and if so append it after the tertiary
         value -->
	<condition property="version.string" value="${version.primary}.${version.secondary}.${version.tertiary}.${release.type}">
		<isset property="release.type" />
	</condition>
	<property name="version.string" value="${version.primary}.${version.secondary}.${version.tertiary}" />

	<property name="javadoc.title" value="${product} ${product.lib} Java API Documentation" />
	<property name="javadoc.header" value="${product} ${product.lib} ${version.string}&lt;br&gt;Java API Documentation" />
	<property name="tld.title" value="${product} ${product.lib} ${version.string} Tag Library Reference" />
	<property name="meta-include" location="resources/icefaces.ace/META-INCLUDE" />
	<property name="faces-config.host" location="${exploded}/META-INF/faces-config.xml" />
	<property name="faces-config.merge" location="${meta-include}/faces-config.xml" />
	<property name="generator.faces-config.host" value="${faces-config.host}" />
	<property name="generator.faces-config.merge" value="${faces-config.merge}" />
	<property name="generator.faces-config.output" value="${faces-config.host}" />
	<tstamp>
		<format property="build.time" pattern="yyyy-mm-dd hh:mm:ss" />
	</tstamp>

	<import file="../../../resources/build/build.xml" />

	<path id="compile.run.classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
		<fileset dir="${lib.dir}/generator" includes="*.jar" />
		<pathelement path="../component/src" />
		<pathelement path="../component/src/org/icefaces/ace/api/" />
		<pathelement path="../component/build/meta" />

	</path>
	
	<path id="core.classpath">
        <fileset dir="${lib.dir}" includes="*.jar" excludes="**/javax.faces.jar,**/jsp-api.jar,**/javax.servlet.jsp.jar"/>
    </path>

	<path id="javadoc.classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
		<fileset dir="${lib.dir}/generator" includes="*.jar" />
		<pathelement path="../component/src" />
		<pathelement path="../component/build/meta" />
		<!--     <pathelement path="./build/generated/base"/> -->
		<pathelement path="./build/exploded" />

	</path>

	<!-- include source images and css for sprite generation -->
    <!-- include source images and css for sprite generation -->
    <macrodef name="includeBase3Resources">
        <attribute name="dir" />
        <attribute name="skin" />
        <sequential>
            <mkdir dir="${root.dir.path}/@{skin}" />
            <!-- Copy all resources to the input directory for SmartSprites. -->
            <mkdir dir="${root.dir.path}/@{skin}/" />
            <!-- copy base styles -->
            <copy todir="${root.dir.path}/@{skin}/">
                <fileset dir="${theme.dir.path}/${theme.base.dir}" includes="**" />
            </copy>
            <!-- copy base css3 styles -->
            <copy todir="${root.dir.path}/@{skin}/">
                <fileset dir="${theme.dir.path}/${theme.base3.dir}" includes="**" />
            </copy>
            <!-- copy the actual skin -->
            <copy todir="${root.dir.path}/@{skin}/" overwrite="true">
                <fileset dir="@{dir}" includes="**" />
            </copy>
            <!-- At the same time, copy all resources to the SmartSprites output directory.
                          with the exclusion of the the .css files -->
            <mkdir dir="${output.dir.path}/@{skin}/" />
            <copy todir="${output.dir.path}/@{skin}/">
                <fileset dir="${root.dir.path}/@{skin}/" excludes="**/*.css" />
            </copy>
        </sequential>
    </macrodef>


    <!-- include source images and css for sprite generation -->
    <macrodef name="includeBaseResources">
        <attribute name="dir" />
        <attribute name="skin" />
        <sequential>
            <mkdir dir="${root.dir.path}/@{skin}" />
            <!-- Copy all resources to the input directory for SmartSprites. -->
            <mkdir dir="${root.dir.path}/@{skin}/" />
            <!-- copy base styles -->
            <copy todir="${root.dir.path}/@{skin}/">
                <fileset dir="${theme.dir.path}/${theme.base.dir}" includes="**" />
            </copy>
            <!-- copy the actual skin -->
            <copy todir="${root.dir.path}/@{skin}/" overwrite="true">
                <fileset dir="@{dir}" includes="**" />
            </copy>
            <!-- At the same time, copy all resources to the SmartSprites output directory.
                          with the exclusion of the the .css files -->
            <mkdir dir="${output.dir.path}/@{skin}/" />
            <copy todir="${output.dir.path}/@{skin}/">
                <fileset dir="${root.dir.path}/@{skin}/" excludes="**/*.css" />
            </copy>
        </sequential>
    </macrodef>

	<!-- check for any file modifications and call smartsprites -->
	<macrodef name="generatesprites">
		<attribute name="skin" />
		<sequential>
			<mkdir dir="${root.dir.path}/@{skin}/base" />
			<copy todir="${root.dir.path}/@{skin}/base" file="${smartsprites.basedir}/base.css" />
			<fileset id="@{skin}.files" dir="${root.dir.path}/@{skin}">
				<modified />
			</fileset>
			<pathconvert property="@{skin}.modified" refid="@{skin}.files" setonempty="false" />
			<antcall target="smartsprites">
				<param name="skin" value="@{skin}" />
			</antcall>
		</sequential>
	</macrodef>


	<macrodef name="compresscssmacro">
		<attribute name="name" />
		<sequential>
			<yui-compressor name="@{name}" inputDir="${resources}/org.icefaces.component.skins/@{name}" outputDir="${resources}/org.icefaces.component.skins/@{name}" />

			<!-- removes ';'from  the url('#{resource['resourcePath'];}' -->
			<replaceregexp match="];}" replace="]}" flags="g" file="${resources}/org.icefaces.component.skins/@{name}/@{name}-min.css">
			</replaceregexp>

			<move file="${resources}/org.icefaces.component.skins/@{name}/@{name}.css" tofile="${resources}/org.icefaces.component.skins/@{name}.css" overwrite="yes" />
			<move file="${resources}/org.icefaces.component.skins/@{name}/@{name}-min.css" tofile="${resources}/org.icefaces.component.skins/@{name}-min.css" overwrite="yes" />


		</sequential>
	</macrodef>
	
	<target name="compile-core" description="compile the sharedsource ">
		<javac srcdir="${core.dir}" destdir="${exploded}" source="${compile.source}" target="${compile.target}" debug="${compile.debug}" verbose="false" includeantruntime="false">
            <classpath refid="core.classpath" />
        </javac>
    </target>

	<target name="compile" depends="prepare, compile-meta, generate, compile-base, compile-manual, compile-support,
        min-js-compress, skins, compress-skins" description="compile the source ">
		<copy todir="${exploded}/META-INF/resources">
			<fileset dir="${resources}" />
		</copy>
		<copy todir="${exploded}/META-INF/resources/org.icefaces.component.util">
			<fileset dir="${shared.js.dir}" />
		</copy>
	</target>

	<target name="compile-base" depends="compile-core">
		<javac srcdir="${build}/generated/base" destdir="${exploded}" source="${compile.source}" target="${compile.target}" debug="${compile.debug}" verbose="false" includeantruntime="false">
			<classpath refid="compile.run.classpath" />
		</javac>
	</target>

	<target name="compile-manual">
		<javac srcdir="${src}" destdir="${build}/exploded" source="${compile.source}" target="${compile.target}" debug="${compile.debug}" excludes="**/*Meta.java" verbose="false" failonerror="true" includeantruntime="false">
			<classpath refid="compile.run.classpath" />
		</javac>
	</target>

	<target name="compile-support">
		<javac srcdir="${build}/generated/support" destdir="${exploded}" source="${compile.source}" target="${compile.target}" debug="${compile.debug}" verbose="false" includeantruntime="false">
			<classpath refid="compile.run.classpath" />
		</javac>
	</target>

	<target name="prepare">
		<mkdir dir="${build}/meta" />
		<mkdir dir="${build}/resources/META-INF" />
		<mkdir dir="${exploded}" />
		<mkdir dir="${build}/generated" />
		<mkdir dir="${build}/generated/base" />
		<mkdir dir="${build}/generated/support" />
	</target>

	<target name="compile-meta">
		<!-- Add these to javac if getting funky compilation errors: optimize="false"
              verbose="true" -->
		<javac srcdir="${src}" destdir="${build}/meta" source="${compile.source}" target="${compile.target}" debug="${compile.debug}" includes="**/*Meta.java" includeantruntime="false">
			<classpath refid="compile.run.classpath" />
		</javac>
	</target>

	<target name="generate">
		<tstamp />
		<java classname="org.icefaces.ace.generator.Generator" classpathref="compile.run.classpath" fork="true" classpath="${build}">
			<!-- the short name of the library is specified as the first attribute, the namespace as the second -->
			<arg line="mobi http://www.icesoft.com/icefaces/mobile/component" />
			<sysproperty key="generator.tld.doc.display.name" value="Mobile Components" />
			<sysproperty key="generator.tld.doc.version" value="1.0.0" />
		</java>
		<java classname="org.icefaces.ace.generator.xmlbuilder.FacesConfigMerge" classpathref="compile.run.classpath" fork="true" classpath="${build}">
			<arg value="${generator.faces-config.host}" />
			<arg line="${generator.faces-config.merge}" />
			<arg value="${generator.faces-config.output}" />
		</java>
	</target>

	<target name="lib" depends="compile" description="Generate the icefaces-mobi.jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}" />

		<!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
		<jar destfile="${dist}/${icefaces-mobi.lib.name}.jar" duplicate="fail">
			<metainf dir="${build}/resources/META-INF" />

			<manifest>
				<section name="org.icefaces">
					<attribute name="Implementation-Title" value="${product} ${product.lib}" />
					<attribute name="Implementation-Version" value="${version.string}" />
					<attribute name="Build-Number" value="${build.number}" />
					<attribute name="Build-Time" value="${build.time}" />
					<attribute name="Implementation-Vendor" value="${company}" />
				</section>
			</manifest>

			<fileset dir="${exploded}" />
			<fileset dir="${src}" includes="org/icefaces/component/resources/" />
		</jar>
		<copy file="${dist}/${icefaces-mobi.lib.name}.jar" todir="${lib.dir}" overwrite="true" />
	</target>

	<target name="dist" depends="lib,tlddoc,javadoc" description="Generate the complete ICEfaces Mobility Components distribution (lib + javadoc, tld doc)">
	</target>

	<target name="javadoc" depends="compile">
		<delete dir="${javadocs.dir}" />
		<mkdir dir="${java.doc}" />
		<javadoc sourcepath="${src}" destdir="${java.doc}" classpathref="javadoc.classpath" windowtitle="${javadoc.title}" failonerror="true" bottom="Copyright ${year} ${copyright}">
			<header>
				<![CDATA[${javadoc.header}]]>
			</header>
			<footer>
				<![CDATA[${javadoc.header}]]>
			</footer>
			<doctitle>
				<![CDATA[<h2>${javadoc.title}</h2>]]></doctitle>
	</javadoc>
</target>

<target name="javadoc-jar" depends="javadoc">
	<jar destfile="${dist}/${icefaces-mobi.lib.name}-javadoc.jar">
		<fileset dir="${java.doc}" includes="**/*" />
	</jar>
</target>

<target name="src-jar" depends="">
	<jar destfile="${dist}/${icefaces-mobi.lib.name}-sources.jar">
		<fileset dir="${src}" includes="**/*.java" />
	</jar>
</target>

<target name="clean" description="clean up">

	<!-- Delete the ${build} and ${dist} directory trees -->
	<delete dir="${build}" />
	<delete dir="${dist}" />
	<delete file="${combined.js}" failonerror="false" />
	<delete file="${combined.js.tmp}" failonerror="false" />
	<delete includes="**/*-min.js" dir="${resources}" />

	<antcall target="clean-skins" />

	<!--   <subant buildpath="${cssurlmapper.rootdir}" target="clean"/>   -->
</target>

<target name="init-skip-css-properties" description="Test theme source dates against last successful run to avoid unessary work">
	<!--<mkdir dir="${root.dir.path}" />-->
	<uptodate targetfile="${build}/skins/in/skins.done" property="skins.skip">
		<srcfiles dir="${theme.dir.path}" includes="**/*.css" />
	</uptodate>
	<echo message="Skip CSS: ${skins.skip}" />
</target>

<target name="skins" unless="skins.skip" depends="init-skip-css-properties" description="Generate skinning resources for deployment.">
	<echo message="path to cssurlMapper is ${lib.dir}/generator" />
	<taskdef name="cssurlmapper" classname="${cssurlmapper.class}" classpath="${lib.dir}/generator/cssurlmapper.jar;${lib.dir}/generator/commons-cli-1.2.jar" />

	<!-- Declare all the resources to include -->
	<!-- 'dir' is the actual directory that contains the resources -->
	<!-- 'name' is just a working name for these resources; they will be placed
              under a directory with this name -->
	<!-- 'skin' is the name of the skin these resources will be part of -->

	<includeBaseResources dir="${theme.dir.path}/archaic" skin="archaic" />
	<includeBase3Resources dir="${theme.dir.path}/android" skin="android" />
	<includeBase3Resources dir="${theme.dir.path}/bberry" skin="bberry" />
	<includeBase3Resources dir="${theme.dir.path}/honeycomb" skin="honeycomb" />
	<includeBase3Resources dir="${theme.dir.path}/ipad" skin="ipad" />
	<includeBase3Resources dir="${theme.dir.path}/iphone" skin="iphone" />

	<!-- Generate a single CSS file per skin -->
	<concatskin name="android" inputdir="${build}/skins/in" outputdir="${build}/skins/out" />
	<replaceregexp file="${build}/skins/out/android/android.css" match="(\/\*\*\*([\s\S]*?)(Copyright)+([\s\S]*?)\*\/)" flags="mg" replace="" />
	<concatskin name="honeycomb" inputdir="${build}/skins/in" outputdir="${build}/skins/out" />
	<replaceregexp file="${build}/skins/out/honeycomb/honeycomb.css" match="(\/\*\*\*([\s\S]*?)(Copyright)+([\s\S]*?)\*\/)" flags="mg" replace="" />
	<concatskin name="iphone" inputdir="${build}/skins/in" outputdir="${build}/skins/out" />
	<replaceregexp file="${build}/skins/out/iphone/iphone.css" match="(\/\*\*\*([\s\S]*?)(Copyright)+([\s\S]*?)\*\/)" flags="mg" replace="" />
	<concatskin name="bberry" inputdir="${build}/skins/in" outputdir="${build}/skins/out" />
	<replaceregexp file="${build}/skins/out/bberry/bberry.css" match="(\/\*\*\*([\s\S]*?)(Copyright)+([\s\S]*?)\*\/)" flags="mg" replace="" />
	<concatskin name="ipad" inputdir="${build}/skins/in" outputdir="${build}/skins/out" />
	<replaceregexp file="${build}/skins/out/ipad/ipad.css" match="(\/\*\*\*([\s\S]*?)(Copyright)+([\s\S]*?)\*\/)" flags="mg" replace="" />
    <concatskin name="archaic" inputdir="${build}/skins/in" outputdir="${build}/skins/out" />
    <replaceregexp file="${build}/skins/out/archaic/archaic.css" match="(\/\*\*\*([\s\S]*?)(Copyright)+([\s\S]*?)\*\/)" flags="mg" replace="" />

	<!-- Copy all resources to the skins resource library -->
	<copy todir="${resources}/${skins.lib}">
		<fileset dir="${output.dir.path}" includes="**" />
	</copy>

	<!-- Process sprites, if use.sprites is set -->
	<antcall target="sprites" />

	<!-- Map all URLs to the JSF format, CSS files already in the skins resource
              library will be overwritten -->
	<cssurlmapper libraryname="${skins.lib}" inputdir="${output.dir.path}" outputdir="${resources}/${skins.lib}" />

	<touch file="${build}/skins/in/skins.done" />
</target>

<target name="clean-skins" description="Clean all generated skinning resources.">

	<!-- Delete temporary directories -->
	<delete dir="${root.dir.path}" />
	<delete dir="${output.dir.path}" />

	<!-- Delete the entire skins resource library -->
	<delete dir="${resources}/${skins.lib}" />

	<delete file="cache.properties" />

</target>

<target name="sprites" description="Prepare files to generate sprites." if="use.sprites">

	<available file="build.properties" property="smartsprites.properties.available" />
	<fail unless="smartsprites.properties.available">

            Please provide SmartSprite parameters in a 'build.properties' file.

        </fail>

	<property file="build.properties" />

	<taskdef resource="smartsprites.xml">
		<classpath>
			<fileset dir="${smartsprites.basedir}">
				<include name="*.jar" />
			</fileset>
		</classpath>
	</taskdef>

	<!-- Specify the names of the skins to process, based on the resources
              included above. -->
	<generatesprites skin="iphone" />
	<generatesprites skin="ipad" />
	<generatesprites skin="android" />
	<generatesprites skin="honeycomb" />
	<generatesprites skin="bberry" />
	<generatesprites skin="archaic" />
</target>

<target name="compress-skins" unless="skins.skip">
	<compresscssmacro name="iphone" />
	<compresscssmacro name="ipad" />
	<compresscssmacro name="android" />
	<compresscssmacro name="honeycomb" />
	<compresscssmacro name="bberry" />
	<compresscssmacro name="archaic" />
</target>

<target name="smartsprites" description="Performs CSS sprite processing." if="${skin}.modified">

	<smartsprites rootdir="${root.dir.path}/${skin}" documentrootdir="${document.root.dir.path}" outputdir="${output.dir.path}/${skin}" cssfileencoding="${css.file.encoding}" cssfilesuffix="${css.file.suffix}" loglevel="${log.level}" spritepngdepth="${sprite.png.depth}" spritepngie6="${sprite.png.ie6}" />
</target>


<target name="tlddoc" description="Generate the component TLD Documentation in HTML format.">
	<gen.tld.doc tld.file="${tld.file}" />
</target>


<target name="init-skip-res-js-properties" description="Test combined js source dates against last successful run to avoid unnecessary work">
	<uptodate targetfile="${combined.js.tmp}" property="res.js.skip">
		<srcfiles dir="${resources}/org.icefaces.component/" includes="**/*.js" />
	</uptodate>
	<echo message="Skip Combined JavaScript: ${res.js.skip}" />
</target>

<target name="res-js-combine" depends="init-skip-res-js-properties" unless="res.js.skip">
	<delete file="${combined.js.tmp}" verbose="true" />
	<concat destfile="${combined.js.tmp}" force="true" fixlastline="true">
		<filelist dir="${resource.js.dir}">
			<file name="component.js" />
		</filelist>
		<filelist dir="${shared.js.dir}">
			<file name="iscroll.js" />
		</filelist>
		<fileset dir="${resources}">
			<!--     <include name="org.icefaces.component.button/button.js"/>  MOBI-200-->
			<include name="org.icefaces.component.button/menubutton.js" />
			<include name="org.icefaces.component.carousel/carousel.js" />
			<include name="org.icefaces.component.datespinner/datespinner.js" />
			<include name="org.icefaces.component.flipswitch/flipswitch.js" />
			<include name="org.icefaces.component.panelconfirmation/panelconfirmation.js" />
			<include name="org.icefaces.component.panelpopup/panelpopup.js" />
			<include name="org.icefaces.component.submitnotification/submitnotification.js" />
			<include name="org.icefaces.component.timespinner/timespinner.js" />
			<include name="org.icefaces.component.tabset/tabset.js" />
			<include name="org.icefaces.component.accordion/accordion.js" />
			<include name="org.icefaces.component.layoutmenu/layoutmenut.js" />
			<include name="org.icefaces.component.splitpane/splitpane.js" />
		</fileset>
	</concat>
</target>


<!--
        Builds the combined.js script.  Components currently include their
        own JavaScript snippets so there is no need to run this target
        under most circumstances.
    -->
<target name="res-js" depends="res-js-compress" unless="res.js.skip" description="Conditional check if combined JavaScript files have changed and need to be processed.">
</target>


<target name="init-skip-comp-js-properties" description="Test individual js source dates against last successful run to avoid unnecessary work">
	<uptodate targetfile="${build}/comp-js.done" property="comp.js.skip">
		<srcfiles dir="${resources}/" includes="**/*.js" />
	</uptodate>
	<echo message="Skip component JavaScript: ${comp.js.skip}" />
</target>

<target name="res-js-compress" depends="res-js-combine" unless="">
	<echo message="Compressing combined javascript code" />
	<java jar="${lib.dir}/generator/yui-compressor.jar" fork="yes">
		<arg line="--preserve-semi" />
		<arg value="${combined.js.tmp}" />
		<arg value="-o" />
		<arg value="${combined.js}" />
	</java>
</target>

<macrodef name="compressjs">
	<attribute name="comp" />
	<attribute name="path" />
	<sequential>
		<echo>path is @{path}</echo>
		<echo>comp is @{comp}</echo>
		<java jar="${lib.dir}/generator/yui-compressor.jar" fork="yes">
			<arg line="--preserve-semi" />
			<arg value="@{path}/@{comp}.js" />
			<arg value="-o" />
			<arg value="@{path}/@{comp}-min.js" />
		</java>
	</sequential>
</macrodef>

<target name="min-js-compress" depends="init-skip-comp-js-properties" unless="comp.js.skip" description="Compress individual javascript files for each component ">
	<echo message="Compressing individual javascript files" />
	<compressjs comp="component" path="${resources}/org.icefaces.component.util" />
	<compressjs comp="menubutton" path="${resources}/org.icefaces.component.button" />
	<compressjs comp="carousel" path="${resources}/org.icefaces.component.carousel" />
	<compressjs comp="datespinner" path="${resources}/org.icefaces.component.datespinner" />
	<compressjs comp="flipswitch" path="${resources}/org.icefaces.component.flipswitch" />
	<compressjs comp="panelconfirmation" path="${resources}/org.icefaces.component.panelconfirmation" />
	<compressjs comp="panelpopup" path="${resources}/org.icefaces.component.panelpopup" />
	<compressjs comp="submitnotification" path="${resources}/org.icefaces.component.submitnotification" />
	<compressjs comp="splitpane" path="${resources}/org.icefaces.component.splitpane" />
	<compressjs comp="timespinner" path="${resources}/org.icefaces.component.timespinner" />
	<compressjs comp="tabset" path="${resources}/org.icefaces.component.tabset" />
	<compressjs comp="accordion" path="${resources}/org.icefaces.component.accordion" />
	<compressjs comp="layoutmenu" path="${resources}/org.icefaces.component.layoutmenu" />
	<touch file="${build}/comp-js.done" />
</target>

<target name="res-js-no-compress" depends="res-js-combine">
	<echo message="Not compressing combined javascript code" />
	<move file="${combined.js.tmp}" tofile="${combined.js}" overwrite="yes">
		<filterchain>
			<stripjavacomments />
			<ignoreblank />
		</filterchain>
	</move>
</target>


</project>

<!--
  ~ Copyright 2004-2013 ICEsoft Technologies Canada Corp.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the
  ~ License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an "AS
  ~ IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied. See the License for the specific language
  ~ governing permissions and limitations under the License.
  -->

<project name="icemobile-comp-common">

    <path id="jruby.bsh.classpath">
    	<pathelement location="lib/jruby-complete-1.6.8.jar"/>
    	<pathelement location="lib/bsf.jar" />
    	<pathelement location="lib/commons-logging.jar" />
    </path>
	
	<macrodef name="gen.tld.doc">
        <attribute name="tld.file"/>
        <sequential>
            <delete dir="${tld.doc}"/>
            <mkdir dir="${tld.doc}"/>
            <java jar="${tld.jar}/tlddoc.jar" fork="true" failonerror="true">
                <arg value="-d"/>
                <arg value="${tld.doc}"/>
                <arg value="-doctitle"/>
                <arg value="${tld.title}"/>
                <arg value="-windowtitle"/>
                <arg value="${tld.title}"/>
                <arg value="@{tld.file}"/>
            </java>
        </sequential>
    </macrodef>

    <macrodef name="yui-compressor">
        <attribute name="name"/>
        <attribute name="inputDir"/>
        <attribute name="outputDir"/>
        <sequential>
            <java jar="${lib.dir}/generator/yui-compressor.jar" fork="yes">
                <arg value="--type"/>
                <arg value="css"/>
                <arg value="@{inputDir}/@{name}.css"/>
                <arg value="-o"/>
                <arg value="@{outputDir}/@{name}-min.css"/>
            </java>
        </sequential>
    </macrodef>
	
	<macrodef name="copy.theme.resources">
		<attribute name="name"/>
		<attribute name="build.dir"/>
		<sequential>
			<copy todir="@{build.dir}/@{name}/">
	            <fileset dir="./themes/@{name}/" excludes="**/*.scss" />
	        </copy>
		</sequential>
	</macrodef>

    <macrodef name="concatskin">
        <attribute name="name"/>
        <attribute name="inputdir"/>
        <attribute name="outputdir"/>
        <sequential>
            <delete file="@{outputdir}/@{name}/@{name}.css"/>
            <concat destfile="@{outputdir}/@{name}/@{name}.css"
                    append="true">
                <header filtering="no" trimleading="yes" trim="yes">
/*
 * Copyright 2004-2013 ICEsoft Technologies Canada Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS
 * IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
                </header>
                <fileset dir="@{inputdir}/@{name}"
                         includes="*.css"/>
            </concat>
        </sequential>
    </macrodef>

    <target name="compile.scss">
        <echo message="Compiling scss files in ..." />
        <property name="src.dir" value="resources/themes/**/[^_]*.scss" />
    	<echo>${src.dir}</echo>
        <property name="themes.build.dir" location="./build/themes"/>
    	
        <mkdir dir="${themes.build.dir}/android" />
    	<mkdir dir="${themes.build.dir}/android_dark" />
    	<mkdir dir="${themes.build.dir}/android_light" />
    	<mkdir dir="${themes.build.dir}/archaic" />
    	<mkdir dir="${themes.build.dir}/base" />
    	<mkdir dir="${themes.build.dir}/base3" />
    	<mkdir dir="${themes.build.dir}/bberry" />
    	<mkdir dir="${themes.build.dir}/honeycomb" />
    	<mkdir dir="${themes.build.dir}/ipad" />
    	<mkdir dir="${themes.build.dir}/iphone" />
    	<mkdir dir="${themes.build.dir}/simulator" />
    	<copy.theme.resources build.dir="${themes.build.dir}" name="android"/>
    	<copy.theme.resources build.dir="${themes.build.dir}" name="android_dark"/>
		<copy.theme.resources build.dir="${themes.build.dir}" name="android_light"/>
		<copy.theme.resources build.dir="${themes.build.dir}" name="archaic"/>
		<copy.theme.resources build.dir="${themes.build.dir}" name="base"/>
		<copy.theme.resources build.dir="${themes.build.dir}" name="base3"/>
		<copy.theme.resources build.dir="${themes.build.dir}" name="bberry"/>
		<copy.theme.resources build.dir="${themes.build.dir}" name="honeycomb"/>
		<copy.theme.resources build.dir="${themes.build.dir}" name="ipad"/>
    	<copy.theme.resources build.dir="${themes.build.dir}" name="iphone"/>
    	<copy.theme.resources build.dir="${themes.build.dir}" name="simulator"/>
    	
    	
        <script language="ruby">
        	<classpath refid="jruby.bsh.classpath"/>
<![CDATA[
    puts Dir.pwd
    require './resources/lib/sass-3.2.5/lib/sass'
    require './resources/lib/sass-3.2.5/lib/sass/exec'
    
    build_dir = $project.getProperty('themes.build.dir')

    files = Dir.glob($project.getProperty('src.dir'))
    files.each do 
        | scss |
        	theme = File.dirname(scss).split(File::SEPARATOR).last
            css = File.basename(scss, ".*") + ".css"
            css_path = File.join(build_dir, theme, css);
            if !File.exists?(css_path) or File.mtime(scss) > File.mtime(css_path)
                puts "     [sass compiler] " + scss + " -> " + File.join(build_dir, theme, css)
                #debug opts = Sass::Exec::Sass.new(["--load-path", File.dirname(scss), scss, File.join(build_dir, theme, css), "--debug-info"])
                opts = Sass::Exec::Sass.new(["--load-path", File.dirname(scss), scss, File.join(build_dir, theme, css)])
                opts.parse
            end
    end
]]>
        </script>
        <echo message="Done compiling scss files!" />
    </target>
	
	<target name="clean">
		<delete dir="build/themes" />
	</target>

</project>
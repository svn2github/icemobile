<?xml version="1.0"?>
<!--
  ~ Copyright 2004-2011 ICEsoft Technologies Canada Corp. (c)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions an
  ~ limitations under the License.
  -->
<taglib
        xmlns="http://java.sun.com/xml/ns/j2ee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd
http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
        version="2.0">


    <description>ICEfaces Composite Component Library</description>
    <display-name>ICEfaces Composite Component Library</display-name>
    <tlib-version>1.8.2</tlib-version>
    <short-name>ice-cc</short-name>
    <uri>http://www.icesoft.com/icefaces-composite-comps</uri>

    <tag>
        <description><![CDATA[
       <h2>Auto-Sort Table Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>The Auto-Sort Table can be used with any List</li>
            <li>No code is required to sort</li>
            <li>Sorting is done automatically</li>
            <li>A Data Pager can be automatically included</li>
       </ul>
       <h3>How to Use</h3>
       <ol>
       	   <li>Create an instance of the AutoSortTableBean class in your managed bean</li>
   <li>Add the autoSortTable tag to your page</li>
   <li>Set the 'id' attribute on the tag</li>
   <li>Add an ice-cc:column tag for each column you would like to show in the table</li>
   <li>Bind the 'value' attribute of the column tag to a property of the Object in your list, using the 'row' variable name for the row-level variable</li>
   <li>Set the 'name' attribute of the column tag to the name of the property in your row-level Object ( eg. 'id' for the column for 'row.id')</li>
       </ol>
    ]]></description>
        <display-name>Auto Sort Table Composite Component</display-name>
        <name>autoSortTable</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content>JSP</body-content>
        <example><![CDATA[
<ice-cc:autoSortTable id="employees"
	bean="#{autoSortTableExampleBean.tableBean}"
	style="width:97%;"
	showDataPager="#{autoSortTableExampleBean.showDataPager}"
	showRowControls="#{autoSortTableExampleBean.showRowControls}"
	columnWidths="60px,100px,100px">
	<ice-cc:column title="ID" value="#{row.id}" name="id" sortable="true"/>
	<ice-cc:column title="First Name" value="#{row.firstName}" name="firstName" sortable="true"/>
	<ice-cc:column title="Last Name" value="#{row.lastName}" name="lastName" sortable="true"/>
</ice-cc:autoSortTable>
    ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>
                com.icesoft.faces.facelets.component.table.autosort.AutoSortTableBean
            </type>
            <required>true</required>
            <description><![CDATA[
        Must resolve to an instance of the AutorSortTableBean class
      ]]></description>
        </attribute>
        <attribute>
            <name>rendered</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Flag indicating whether this component should be
                rendered (during Render Response Phase), or processed on any
                subsequent form submit (default true).
            </description>
        </attribute>
        @ROWS_ATTR
        @STYLE_ATTR
        @SHOWDATAPAGER_ATTR
        @DATAPAGERPASSTHROUGH_ATTR
        @SHOWROWCONTROLS_ATTR
        @PANELSTYLE_ATTR
        @COLUMNWIDTHS_ATTR
    </tag>

    <!-- COLUMN -->
    <tag>
        <description><![CDATA[
    	<h2> Easy Column Composite Component</h2>
	<h3>Features</h3>
	<ul>
			<li>Useful when creating basic tables with text headers and cell content.</li>
      <li>Does not require extra bean code.</li>
      <li>Facilitates code re-use by using the column composite component tag for
          a dataTable column rather than typing out all the necessary page markup.
      </li>
	</ul>
	<h3>How To Use</h3>
	<ol>
		   <li>Create an ice:dataTable</li>
  <li>Instead of typing out ice:column with all the necessary child tags, use ice-cc:column</li>
   <li>Use the 'title' attribute for the column title and the 'value' attribute for the cell contents</li>
   <li>If you wish to use ice:commandSortHeader, use the 'name' attribute to populate the ice:commandSortHeader columnName attribute and set the 'sortable' attribute to true</li>
	</ol>
     ]]></description>
        <display-name>Column Composite Component</display-name>
        <name>column</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:column title="ID"
	value="#{row.id}"
	name="id"
	sortable="true"/>
    ]]></example>
        @COLUMN_TITLE_ATTR
        <attribute>
            <name>name</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        The name of the column property, used for sorting (only required when 'sortable' set to true)
      ]]></description>
        </attribute>
        <attribute>
            <name>value</name>
            <type>java.lang.Object</type>
            <required>true</required>
            <rtexprvalue>false</rtexprvalue>
            <description>The value binding for the column</description>
        </attribute>
        <attribute>
            <name>sortable</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description>Sets whether the column will be sortable (default
                false)
            </description>
        </attribute>
    </tag>


    <!-- CSS  -->

    <tag>
        <description><![CDATA[
       ICEfaces Composite Component Library CSS
       <h3>Features</h3>
       <ul>
       		<li>Apply style classes packaged in the icefaces-composite-comps.jar to ICEfaces composite components:<br/>
       		    RichDataGrid<br/>
                RichTabs<br/>
                RoundCorners<br/>
                Schedule<br/>
                SelectionTree<br/>
                Slider<br/>
                Spinner<br/>
                TreeTable<br/>
                TriStateCheckBox<br/>
            </li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>In pages that use the components listed above, nest the ice-cc:css tag in the head tag.</li>
		</ol>
    ]]></description>
        <display-name>ICEfaces Composite Components CSS</display-name>
        <name>css</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
        <head>
    	    <ice-cc:css/>
    	</head>
     ]]></example>
    </tag>

    <!-- DATAPAGER -->
    <tag>
        <description><![CDATA[

       <h2>Easy Data Pager Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>Quickly add a paginator to your dataTable</li>
       		<li>Does not require extra bean code</li>
       		<li>Facilitates code re-use by using the dataPager composite component tag for a dataPaginator rather than typing out all the necessary page markup</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>Create an ice:dataTable</li>
			   <li>Instead of typing out ice:dataPaginator with all the necessary child tags, use ice-cc:dataPager</li>
			   <li>Use the 'for' attribute to bind the dataTable id to the composite component</li>
			   <li>Add optional attributes</li>

		</ol>

    ]]></description>
        <display-name>Data Pager Composite Component</display-name>
        <name>dataPager</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:dataPager for="users"/>
    ]]></example>
        @FOR_ATTR
        <attribute>
            <name>renderDataPager</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Whether to render the dataPager</description>
        </attribute>
        @DATAPAGERPASSTHROUGH_ATTR
        @STYLE_ATTR
    </tag>


    <!-- DATAPAGER INFO -->
    <tag>
        <description><![CDATA[
       <h2>Easy Data Pager Info Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>Quickly add a text based, informative paginator to your dataTable</li>
       		<li>Does not require extra bean code</li>
       		<li>Facilitates code re-use by using the dataPagerInfo composite component tag for a dataPaginator rather than typing out all the necessary page markup</li>
        	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>Use an ice:dataTable</li>
			   <li>Instead of typing out ice:dataPaginator with all the necessary child tags, use ice-cc:dataPagerInfo</li>
			   <li>Use the 'for' attribute to bind the dataTable id to the composite component</li>
			   <li>If you would like to customize the text, set the 'value' attribute</li>
		</ol>
    ]]></description>
        <display-name>DataPager Info Composite Component</display-name>
        <name>dataPagerInfo</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:dataPagerInfo for="users"/>
    ]]></example>
        @FOR_ATTR
        <attribute>
            <name>value</name>
            <required>false</required>
            <description><![CDATA[
        The formatted text to display (default 'Results {0}-{1} of {2} (Page {3} of {4}'),
        where the following variables apply:<br/>
        <ol>
        	<li>first row index</li>
        	<li>last row index</li>
        	<li>row count</li>
        	<li>current page index</li>
        	<li>page count</li>
        </ol>
      ]]></description>
        </attribute>
    </tag>


    <!-- DATE SPINNER -->

    <tag>
        <description><![CDATA[

		<h2>Date Spinner Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>The Date Spinner allows you to scroll date values forward and back</li>
       		<li>The increment and decrement step value can be set on the bean</li>
       		<li>The date format can be set to short, medium, long, or full</li>
       		<li>Changes to the underlying dateTimeConverter require a full post-back (ie. redirect)</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>Create an instance of the DateSpinner class in your managed bean</li>
			   <li>Use the dateSpinner tag in your page (eg. ice-cc:dateSpinner).  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
			   <li>Bind the 'bean' attribute on the tag to your managed bean property (eg. bean="#{myBean.spinner})</li>
			   <li>Set the 'incrementBy' property on the DateSpinner object (default is 1)</li>
			   <li>Set the 'dateStyle' attribute on the dateSpinner tag (default is 'default', other valid values are 'short', 'medium', 'long', and 'full')</li>
			   <li>Set the 'type' attribute on the dateSpinner tag (default is 'both', other valid values are 'date' for showing only the date, and 'time' for showing only the time)</li>
			   <li>Set the 'width' attribute on the dateSpinner tag (default is '200px')</li>
		</ol>
    ]]></description>
        <display-name>Date Spinner</display-name>
        <name>dateSpinner</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:dateSpinner id="dateSpinnerDemo"
	bean="#{dateSpinnerExampleBean.spinner}"
	dateStyle="#{dateSpinnerExampleBean.dateStyle}"
	type="#{dateSpinnerExampleBean.type}"
	width="200px"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>com.icesoft.faces.facelets.component.spinner.DateSpinner
            </type>
            <required>true</required>
            <description><![CDATA[
        The bean attribute must resolve to an instance of the DateSpinner class.
      ]]></description>
        </attribute>
        <attribute>
            <name>type</name>
            <required>false</required>
            <description><![CDATA[
        Sets the dateTimeConverter type property [both|date|time} (default both)
      ]]></description>
        </attribute>
        <attribute>
            <name>width</name>
            <required>false</required>
            <description><![CDATA[
        Sets the width of the input field (default 200px)
      ]]></description>
        </attribute>
        <attribute>
            <name>dateStyle</name>
            <required>false</required>
            <description><![CDATA[
        Sets the dateStyle property of the dateTimeConverter [default|short|medium|long|full] (default is 'default')
      ]]></description>
        </attribute>
        <attribute>
            <name>readonly</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:inputText component</description>
        </attribute>
        <attribute>
            <name>partialSubmit</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:inputText component (default
                true)
            </description>
        </attribute>
        <attribute>
            <name>styleClassInput</name>
            <required>false</required>
            <description>Passed through to styleClass attribute of ice:inputText
                component
            </description>
        </attribute>
        <attribute>
            <name>effect</name>
            <required>false</required>
            <description>Passed through to ice:inputText component</description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>Passed through to ice:inputText component</description>
        </attribute>
        @DISABLED_ATTR
    </tag>

    <!-- DIALOG -->

    <tag>
        <description><![CDATA[
	<h2>The Dynamic Dialog Composite Component</h2>
	A popup dialog that can be used for the whole application
       <h3>Features</h3>
       <ul>
       		<li>Choose between rendering okay/yes/no/cancel buttons.</li>
       	<li>Programatically create and pass in Commands for these buttons.</li>
       	<li>Choose dialog content with a Facelet include.</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Add the ice-cc:dialog tag to your application in a spot where it is not nested in a form</li>
			<li>Create a class extending DialogTypes and register it as a reqest scope bean named 'dialogTypes' in faces-config.xml</li>
			<li>Add at least one dialog in the constructor</li>
			<li>Assign a default dialog by adding a managed-property to 'dialogTypes' of 'defaultDialog' with the appropriate 'value'</li>
			<li>To launch the dialog obtain a reference to the managed-bean named 'dialogState', retrieve the current Dialog, configure and set the Dialog to render</li>
		</ol>
    ]]></description>
        <display-name>Dialog Popup Component</display-name>
        <name>dialog</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:dialog modal="true"
	dialog="#{dialogState.currentDialog}"
	styleClass="#{dialogState.currentDialog.cssStyle}"/>
     ]]></example>
        <attribute>
            <name>dialog</name>
            <type>com.icesoft.faces.facelets.component.dialog.Dialog</type>
            <required>true</required>
            <description>Must resolve to an instance of the Dialog class
            </description>
        </attribute>
        <attribute>
            <name>modal</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Determines whether the popup is displayed in modal mode
                (default false)
            </description>
        </attribute>
        <attribute>
            <name>autoCentre</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>autoPosition</name>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>clientOnly</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>effect</name>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>positionOnLoadOnly</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>okButtonStyleClass</name>
            <required>false</required>
            <description>Passed through to styleClass attribute of 'ok'
                ice:commandButton component
            </description>
        </attribute>
        <attribute>
            <name>yesButtonStyleClass</name>
            <required>false</required>
            <description>Passed through to styleClass attribute of 'yes'
                ice:commandButton component
            </description>
        </attribute>
        <attribute>
            <name>noButtonStyleClass</name>
            <required>false</required>
            <description>Passed through to styleClass attribute of 'no'
                ice:commandButton component
            </description>
        </attribute>
        <attribute>
            <name>cancelButtonStyleClass</name>
            <required>false</required>
            <description>Passed through to styleClass attribute of 'cancel'
                ice:commandButton component
            </description>
        </attribute>
        @STYLECLASS_ATTR
    </tag>


    <!-- DUAL LIST -->
    <tag>
        <description><![CDATA[
	Dual List Composite Component<br/>
	<h3>Features</h3>
	<ul>
		<li>The dual list supports the JSF SelectItem and any associated Object with a JSF Converter</li>
		<li>The list heights and widths can be customized</li>
	</ul>
	<h3>How to Use</h3>
	<ol>
		<li>Create an instance of the DualList class in your managed bean</li>
   		<li>Bind the bean attribute on the tag to your managed bean property (eg:
      bean="#{myBean.dualList}")</li>
	</ol>
    ]]></description>
        <display-name>Dual List Composite Component</display-name>
        <name>dualList</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:dualList id="uniqueId"
	bean="#{dualListBean}"
	listWidth="100px"
	listHeight="50px"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>com.icesoft.faces.facelets.component.duallist.DualList</type>
            <required>true</required>
            <description><![CDATA[
        The bean attribute must resolve to an instance of the DualList class.
      ]]></description>
        </attribute>
        <attribute>
            <name>listWidth</name>
            <required>false</required>
            <description><![CDATA[
        Sets the width of both lists, eg. listWidth="100px"
      ]]></description>
        </attribute>
        <attribute>
            <name>listHeight</name>
            <required>false</required>
            <description><![CDATA[
        Sets the height of both lists, eg. listHeight="100px"
      ]]></description>
        </attribute>
        <attribute>
            <name>disabledAvailable</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the left ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>readonlyAvailable</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the left ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>disabledSelected</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the right ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>readonlySelected</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the right ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>addSelectedImage</name>
            <required>false</required>
            <description>Image passed through to addSelected ice:commandButton
            </description>
        </attribute>
        <attribute>
            <name>addAllImage</name>
            <required>false</required>
            <description>Image passed through to addAll ice:commandButton
            </description>
        </attribute>
        <attribute>
            <name>removeSelectedImage</name>
            <required>false</required>
            <description>Image passed through to removeSelected
                ice:commandButton
            </description>
        </attribute>
        <attribute>
            <name>removeAllImage</name>
            <required>false</required>
            <description>Image passed through to removeAll ice:commandButton
            </description>
        </attribute>
        <attribute>
            <name>style</name>
            <required>false</required>
            <description>Passed through to the html table tag that contains this
                component's markup
            </description>
        </attribute>
        <attribute>
            <name>styleClassAvailable</name>
            <required>false</required>
            <description>Passed through to styleClass attribute in left
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>styleClassSelected</name>
            <required>false</required>
            <description>Passed through to styleClass attribute in right
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>autocompleteAvailable</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the autocomplete attribute in left
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>autocompleteSelected</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the autocomplete attribute in right
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>effectAvailable</name>
            <required>false</required>
            <description>Passed through to effect attribute in left
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>effectSelected</name>
            <required>false</required>
            <description>Passed through to effect attribute in right
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>sizeAvailable</name>
            <required>false</required>
            <description>Passed through to size attribute in left
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>sizeSelected</name>
            <required>false</required>
            <description>Passed through to size attribute in right
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>titleAvailable</name>
            <required>false</required>
            <description>Passed through to title attribute in left
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>titleSelected</name>
            <required>false</required>
            <description>Passed through to title attribute in right
                ice:selectManyListbox
            </description>
        </attribute>
    </tag>

    <!-- EASY POPUP -->

    <tag>
        <description><![CDATA[

<h2>The Easy Popup Panel Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>Less code than standard ICEfaces Popup</li>
       		<li>Many configurable options</li>
        	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>Bind a boolean in your bean to the rendered attribute of the component</li>
			   <li>Pass in a bean with a close popup actionListener</li>
			   <li>Nest popup content in the ice-cc:easyPopup tag</li>
		</ol>
    ]]></description>
        <display-name>Easy Popup Panel</display-name>
        <name>easyPopup</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:easyPopup rendered="#{popupExampleBean.showPopup}"
	title="Popup Example"
	bean="#{popupExampleBean}"
	modal="#{popupExampleBean.popupModal}"
	closeMethodName="closePopup">
	<ice:panelGroup>
		Popup Content
	</ice:panelGroup>
</ice-cc:easyPopup>
     ]]></example>
        <attribute>
            <name>bean</name>
            <type></type>
            <required>true</required>
            <description>Bean with a close popup actionListener</description>
        </attribute>
        <attribute>
            <name>closeMethodName</name>
            <required>true</required>
            <description>Name of close popup ActionListener method called in
                'bean'
            </description>
        </attribute>
        <attribute>
            <name>rendered</name>
            <type>java.lang.boolean</type>
            <required>true</required>
            <description>Determines if the component is rendered</description>
        </attribute>
        <attribute>
            <name>closeImage</name>
            <required>false</required>
            <description>Passed through to src attribute of img tag nested in
                ice:commandLink
            </description>
        </attribute>
        <attribute>
            <name>closeStyle</name>
            <required>false</required>
            <description>Passed through to style attribute of img tag nested in
                ice:commandLink
            </description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>The title header for the popup</description>
        </attribute>
        <attribute>
            <name>modal</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Sets the popup to be modal (default false)
            </description>
        </attribute>
        <attribute>
            <name>autoCentre</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>autoPosition</name>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>clientOnly</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>draggable</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>effect</name>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        <attribute>
            <name>positionOnLoadOnly</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:panelPopup</description>
        </attribute>
        @STYLE_ATTR
        @STYLECLASS_ATTR

    </tag>

    <!-- EDITABLE LIST -->

    <tag>
        <description><![CDATA[

		<h2>The Editable List Composite Component</h2>
		<h3>Allows editing, adding and removing String items in a list</h3>
       <h3>Features</h3>
       <ul>
       		<li>The editable list allows you to let the user add and remove items from a list</li>
       		<li>The list height and width can be customized</li>
        	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Create an instance of the EditableList class in your managed bean</li>
			<li>If you would like to enforce unique items in the list, use the EditableList(boolean enforceUnique) constructor</li>
			<li>Use the editableList tag in your page</li>
			<li>Bind the 'bean' attribute on the tag to your managed bean property (eg. bean="#{myBean.editableList})</li>
		</ol>
	 ]]></description>
        <display-name>Editable List</display-name>
        <name>editableList</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:editableList id="uniqueId"
	bean="#{editableListBean}
	listWidth="100px"
	listHeight="50px"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>com.icesoft.faces.facelets.component.editablelist.EditableList
            </type>
            <required>true</required>
            <description><![CDATA[
        The bean attribute must resolve to an instance of the EditableList class.
      ]]></description>
        </attribute>
        <attribute>
            <name>listWidth</name>
            <required>false</required>
            <description><![CDATA[
        Sets the width of the list (default 100px)
      ]]></description>
        </attribute>
        <attribute>
            <name>listHeight</name>
            <required>false</required>
            <description><![CDATA[
        Sets the height of the list (default 100px)
      ]]></description>
        </attribute>
        <attribute>
            <name>autocomplete</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the autocomplete attribute in
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>disabled</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the disabled attribute in
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>effect</name>
            <required>false</required>
            <description>Passed through to effect attribute in
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>readonly</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the readonly attribute in
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>size</name>
            <required>false</required>
            <description>Passed through to size attribute in
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>Passed through to title attribute in
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>style</name>
            <required>false</required>
            <description>Passed through to the html table tag that contains this
                component's markup
            </description>
        </attribute>
        <attribute>
            <name>styleClassList</name>
            <required>false</required>
            <description>Passed through to styleClass attribute in
                ice:selectManyListbox
            </description>
        </attribute>
        <attribute>
            <name>styleClassInput</name>
            <required>false</required>
            <description>Passed through to styleClass attribute in ice:inputText
            </description>
        </attribute>
    </tag>

    <!-- EDITABLE TABLE -->
    <tag>
        <description><![CDATA[
	<h2>The Editable Data Table Composite Component</h2>
       <h3>Features</h3>
       	<ul>
       		<li>Offers direct, inline editing of row data</li>
       		<li>Edits are done in a safe 'edit space' and the direct objects are untouched until the data is saved</li>
       		<li>When a row is selected for editing, it becomes locked in edit mode until the changes are either saved or cancelled</li>
       		<li>Supports editing of text, list, or date information</li>
       		<li>Columns can be made editable or non-editable</li>
       		<li>Supports a listener interface that will be called when a row is saved, so customized actions may be taken (eg. update the database)</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Add the &lt;ice-cc:editableTable/&gt; tag to your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
			<li>Bind the 'bean' attribute to an instance of EditableTableBean</li>
			<li>If you would like to use the listener interface, create a class that implements the IEditableTableEventListener, and use the EditableTableBean(List,IEditableTableEventListener) overloaded constructor</li>
			<li>Set the 'idProperty' attribute on the tag. This should correspond to the property on the row-level bean that is used to identify the row</li>
			<li>For each column that you wish to be editable, choose the &lt;ice-cc:textColumn/&gt;, &lt;ice-cc:selectOneMenuColumn/&gt;, or &lt;ice-cc:selectInputDateColumn/&gt; tags</li>
			<li>Specify the 'title' attribute for each editable column tag</li>
			<li>Specify the 'property' attribute for each editable column tag</li>
			<li>Specify the 'width' attribute for each editable column tag</li>
			<li>For &lt;ice-cc:selectOneMenuColumn/&gt;s, bind the 'selectItems' attribute to a list of SelectItems to be used in the associated drop down list</li>
			<li>For &lt;ice-cc:selectInputDateColumn/&gt;s, you may use a nested &lt;f:convertDateTime/&gt; tag to specify the date format.</li>
			<li>For any columns that you do not wish to be made editable, use the &lt;ice-cc:column/&gt; tag in the following manner &lt;ice-cc:column title="ID" value="#{row.id}" name="id"/&gt; where 'row' is always the 'var' name used to access the property in the source dataTable.</li>
			<li class="faceletInstr">Optionally specify whether the 1st ID column show be shown with the 'showIdCol' attribute.</li>
		</ol>
	]]></description>
        <display-name>Editable Table</display-name>
        <name>editableTable</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:editableTable bean="#{editableTableExampleBean.editableTableBean}"
	id="editableTable" idProperty="id" showIdCol="false">
	<ice-cc:textColumn title="First Name" property="firstName" width="100px"/>
	<ice-cc:textColumn title="Last Name" property="lastName" width="100px"/>
	<ice-cc:selectOneMenuColumn title="Department" property="departmentName"
		selectItems="#{editableTableExampleBean.departments}" width="80px"/>
	<ice-cc:selectInputDateColumn title="Birth Date" property="birthDate" width="150px">
		<f:convertDateTime dateStyle="default"/>
	</ice-cc:selectInputDateColumn>
</ice-cc:editableTable>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>
                com.icesoft.faces.facelets.component.table.editable.EditableTableBean
            </type>
            <required>true</required>
            <description>Must resolve to an instance of the EditableTableBean
                class
            </description>
        </attribute>
        <attribute>
            <name>idProperty</name>
            <required>true</required>
            <description>The name of the id property in your bean</description>
        </attribute>
        <attribute>
            <name>renderIdCol</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Flag indicating whether the id property's column will
                be rendered (default true).
            </description>
        </attribute>
        <attribute>
            <name>rendered</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Flag indicating whether this component should be
                rendered (during Render Response Phase), or processed on any
                subsequent form submit (default true).
            </description>
        </attribute>
        <attribute>
            <name>deleteRows</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Component level ability to delete table rows. Defaults
                to true.
            </description>
        </attribute>
        <attribute>
            <name>addRows</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Component level ability to add table rows. Defaults to
                true.
            </description>
        </attribute>
        <attribute>
            <name>showIdCol</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Specify whether the ID column should be shown. Defaults
                to false.
            </description>
        </attribute>
        @ROWS_ATTR
        @SHOWDATAPAGERINFO_ATTR
        @SHOWDATAPAGER_ATTR
        @SHOWROWCONTROLS_ATTR
        @PANELSTYLE_ATTR
        @ROWSELECTOR_ATTR
        @STYLE_ATTR
        @STYLECLASS_ATTR
    </tag>

    <tag>
        <description><![CDATA[
	The Text Column Composite Component is used in conjuction with the editableTable to render
	a column displayed as an inputText component when in editable mode. This
	component supports validation by nesting f:validator tags.
    ]]></description>
        <display-name>Text Column Composite Component</display-name>
        <name>textColumn</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:editableTable bean="#{editableTableExampleBean.editableTableBean}"
	id="editableTable" idProperty="id">
	<ice-cc:textColumn title="Last Name" property="lastName" width="100px"/>
</ice-cc:editableTable>
     ]]></example>
        @COLUMN_PROPERTY_ATTR
        @COLUMN_TITLE_ATTR
        @WIDTH_ATTR
        @REQUIRED_ATTR
        <attribute>
            <name>autocomplete</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the autocomplete attribute in
                ice:inputText
            </description>
        </attribute>
        <attribute>
            <name>disabled</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the disabled attribute in
                ice:inputText
            </description>
        </attribute>
        <attribute>
            <name>readonly</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the readonly attribute in
                ice:inputText
            </description>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <required>false</required>
            <description>Passed through to styleClass attribute in ice:inputText
            </description>
        </attribute>
    </tag>

    <tag>
        <description><![CDATA[
	The selectInputDateColumn Composite Component is used in conjuction with the editableTable to render
	a column displayed as a selectInputDate (Calendar) component when in editable mode
    ]]></description>
        <display-name>Select Input Date Column</display-name>
        <name>selectInputDateColumn</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:editableTable bean="#{editableTableExampleBean.editableTableBean}"
	id="editableTable" idProperty="id">
	<ice-cc:selectInputDateColumn title="Birth Date" property="birthDate" width="150px">
		<f:convertDateTime dateStyle="default"/>
</ice-cc:editableTable>
     ]]></example>
        @COLUMN_PROPERTY_ATTR
        @COLUMN_TITLE_ATTR
        @REQUIRED_ATTR
        <attribute>
            <name>renderAsPopup</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the ice:selectInputDate component
            </description>
        </attribute>
        <attribute>
            <name>autocomplete</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the autocomplete attribute in
                ice:selectInputDate
            </description>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <required>false</required>
            <description>Passed through to ice:selectInputDate</description>
        </attribute>
        <attribute>
            <name>highlightClass</name>
            <required>false</required>
            <description>Passed through to ice:selectInputDate</description>
        </attribute>
        <attribute>
            <name>highlightUnit</name>
            <required>false</required>
            <description>Passed through to ice:selectInputDate</description>
        </attribute>
        <attribute>
            <name>highlightValue</name>
            <required>false</required>
            <description>Passed through to ice:selectInputDate</description>
        </attribute>
        <attribute>
            <name>renderMonthAsDropdown</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:selectInputDate</description>
        </attribute>
        <attribute>
            <name>renderYearAsDropdown</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:selectInputDate</description>
        </attribute>
        @WIDTH_ATTR
    </tag>

    <tag>
        <description><![CDATA[
	The selectBooleanColumn Composite Component is used in conjunction with the editableTable to render
	a column displayed as a selectBooleanCheckbox component when in editable mode. This
	component support validation by nesting f:validator tags.
    ]]></description>
        <display-name>Select Boolean Column</display-name>
        <name>selectBooleanColumn</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:editableTable bean="#{editableTableExampleBean.editableTableBean}"
	id="editableTable" idProperty="id">
	<ice-cc:selectBooleanColumn title="Has Permission" property="permission" width="50px"/>
</ice-cc:editableTable>
     ]]></example>
        @COLUMN_PROPERTY_ATTR
        @COLUMN_TITLE_ATTR
        @WIDTH_ATTR
        @REQUIRED_ATTR
    </tag>

    <tag>
        <description><![CDATA[
	The Select One Menu Column Composite Component is used in conjuction with the editableTable to render
	a column displayed as a drop down list when in editable mode. This
	component support validation by nesting f:validator tags.
    ]]></description>
        <display-name>Select One Menu Column Composite Component</display-name>
        <name>selectOneMenuColumn</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:editableTable bean="#{editableTableExampleBean.editableTableBean}"
	id="editableTable" idProperty="id">
	<ice-cc:selectOneMenuColumn title="Department" property="departmentName"
		selectItems="#{editableTableExampleBean.departments}" width="80px"/>
</ice-cc:editableTable>
     ]]></example>
        @COLUMN_PROPERTY_ATTR
        <attribute>
            <name>selectItems</name>
            <type>java.util.List&lt;javax.faces.model.SelectItem&gt;</type>
            <required>true</required>
            <description>The list of selectable items when the row is in
                editable mode
            </description>
        </attribute>
        <attribute>
            <name>autocomplete</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>readonly</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        @COLUMN_TITLE_ATTR
        @WIDTH_ATTR
        @REQUIRED_ATTR
    </tag>

    <!-- EXPANDABLE TABLE -->
    <tag>
        <description><![CDATA[
       <h2>Expandable Data Table Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>The expandableTable tag consists of an ice:dataTable containing common elements required to add an expandable table to an application</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>Wrap your dataTable records in com.icesoft.faces.facelets.component.expandabletable.ExpandableRecord, using the parent or child constructor as necessary.</li>
			   <li>Use the expandableTable tag and specify the id and columns attributes.</li>
		</ol>
    ]]></description>
        <display-name>Expandable Table Composite Component</display-name>
        <name>expandableTable</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content>JSP</body-content>
        <example><![CDATA[
<ice-cc:expandableTable id="expTbl"
	bean="#{salesRecordsManager}"
	value="#{salesRecordsManager.salesGroupRecordBeans}"
	cellpadding="0"
	width="500px"
	columnClasses="dummy, dummy, dateColumn, dummy, dummy, dummy"/>
    ]]></example>
        @ID_ATTR
        <attribute>
            <name>value</name>
            <type>javax.faces.model.DataModel</type>
            <required>true</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        The data model for this component.
      ]]></description>
        </attribute>
        <attribute>
            <name>columns</name>
            <required>true</required>
            <description>Comma-delimited list of column name</description>
        </attribute>
        <attribute>
            <name>imageDir</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        The imageDir holds location of the images to be used by the expandable
        table (default "/xmlhttp/css/xp/css-images/")
      ]]></description>
        </attribute>
        <attribute>
            <name>expandImage</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        The expandImage is the name of the expand image to be used by the expandable
        table (default "tree_nav_top_open_no_siblings.gif")
      ]]></description>
        </attribute>
        <attribute>
            <name>contractImage</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        The contractImage is the name of the contract image to be used by the expandable
        table (default "tree_nav_top_close_no_siblings.gif")
      ]]></description>
        </attribute>
        <attribute>
            <name>bgcolor</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Name or code of the background color for this table.
      ]]></description>
        </attribute>
        <attribute>
            <name>border</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Width (in pixels) of the border to be drawn around this table.
      ]]></description>
        </attribute>
        <attribute>
            <name>cellpadding</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Definition of how much space the user agent should leave between the border of each cell and its contents.
      ]]></description>
        </attribute>
        <attribute>
            <name>cellspacing</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Definition of how much space the user agent should leave between the left side of the table and the leftmost column, the top of the table and the top of the top side of the topmost row, and so on for the right and bottom of the table. It also specifies the amount of space to leave between cells.
      ]]></description>
        </attribute>
        <attribute>
            <name>columnClasses</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
         Comma-delimited list of CSS style classes that will be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of columns specified in the "columns" attribute, no "class" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of columns specified in the "columns" attribute, the elements at the posisiton in the list after the value of the "columns" attribute are ignored.

If the value of this attribute is not being set, the tableRenderer would render the default classes using the following pattern (e.g.)
&lt;td class="iceDatTblCol1" /&gt;
&lt;td class="iceDatTblCol2" /&gt;
&lt;td class="iceDatTblCol1" /&gt;
&lt;td class="iceDatTblCol2" /&gt;
....
The above class pattern would allow you to define the base style in the "column" class and if you want to customize any of the specific column you can override the column+index class.
      ]]></description>
        </attribute>
        @COLUMNWIDTHS_ATTR
        <attribute>
            <name>first</name>
            <type>java.lang.integer</type>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Zero-relative row number of the first row to be displayed. If this property is set to zero, rendering will begin with the first row of the underlying data.
      ]]></description>
        </attribute>
        <attribute>
            <name>footerClass</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Space-separated list of CSS style class(es) that will be applied to any footer generated for this table.
The default classe rendered as iceDatTblFtr.
      ]]></description>
        </attribute>
        <attribute>
            <name>frame</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Code specifying which sides of the frame surrounding this table will be visible. Valid values are: none (no sides, default value); above (top side only); below (bottom side only); hsides (top and bottom sides only); vsides (right and left sides only); lhs (left hand side only); rhs (right hand side only); box (all four sides); and border (all four sides).
      ]]></description>
        </attribute>
        <attribute>
            <name>headerClass</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Space-separated list of CSS style class(es) that will be applied to any header generated for this table.
The default class would rendered as iceDatTblHdr.
      ]]></description>
        </attribute>
        <attribute>
            <name>headerClasses</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        This attribute can be used to define the separate style classes for the each header of the each column.
The default would rendered as : iceDatTblColHdr1, iceDatTblColHdr2 alternatively
Note: The attribute has been deprecated.
      ]]></description>
        </attribute>
        <attribute>
            <name>rendered</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Determines if the component is rendered</description>
        </attribute>
        <attribute>
            <name>rowClasses</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Comma-delimited list of CSS style classes that will be applied to the rows of this table. A space separated list of classes may also be specified for any individual row. Thes styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again.
The default classes rendered as iceDatTblRow1, iceDatTblRow2 alternatively.
      ]]></description>
        </attribute>
        <attribute>
            <name>rows</name>
            <type>java.lang.integer</type>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        The number of rows to display, starting with the one identified by the "first" property. If this value is set to zero, all available rows in the underlying data model will be displayed.
      ]]></description>
        </attribute>
        <attribute>
            <name>rules</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Code specifying which rules will appear between cells within this table. Valid values are: none (no rules, default value); groups (between row groups); rows (between rows only); cols (between columns only); and all (between all rows and columns).
      ]]></description>
        </attribute>
        @STYLE_ATTR
        @STYLECLASS_ATTR
        <attribute>
            <name>summary</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Summary of this table's purpose and structure, for user agents rendering to non-visual media such as speech and Braille.
      ]]></description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <description><![CDATA[
        Advisory title information about markup elements generated for this component.
      ]]></description>
        </attribute>
        @WIDTH_ATTR
    </tag>


    <!-- FILTER TABLE -->
    <tag>
        <description><![CDATA[

      <h2>The Filter Table Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>Automatic row filtering</li>
			<li>No filtering code required</li>
			<li>Instantaneous filter updates on every keystroke</li>
			<li>Apply multiple filters at once</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>Use the &lt;ice-cc:filterTable/&gt; tag on your page</li>
			   <li>Bind the 'bean' attribute to an instance of FilterTableBean</li>
			   <li>Use the &lt;ice-cc:filterColumn/&gt; tag for any columns that you wish to be filtered</li>
			   <li>Use the &lt;ice-cc:column/&gt; tag for any columns that you do not wish to be filtered</li>
			   <li>Specify the 'title' attribute for each column tag</li>
			   <li>Specify the 'value' attribute for each column tag (please note that the variable name 'row' must be used, see example)</li>
			   <li>Specify the 'property' attribute for each filterColumn tag. This must associate with the property name used in the column</li>
		</ol>
    ]]></description>
        <display-name>Filter Column Composite Component (used in conjuction with
            the filterTable Component)
        </display-name>
        <name>filterTable</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:filterTable bean="#{filterTableExampleBean.filterTableBean}"
	id="filterTable">
	<ice-cc:column title="ID" value="#{row.id}" />
	<ice-cc:filterColumn title="First Name" value="#{row.firstName}"
		property="firstName" />
	<ice-cc:filterColumn title="Last Name" value="#{row.lastName}"
		property="lastName" />
</ice-cc:filterTable>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>
                com.icesoft.faces.facelets.component.table.filter.FilterTableBean
            </type>
            <required>true</required>
            <description>Must resolve to an instance of the FilterTableBean
                class
            </description>
        </attribute>
        <attribute>
            <name>rendered</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Flag indicating whether this component should be
                rendered (during Render Response Phase), or processed on any
                subsequent form submit (default true).
            </description>
        </attribute>
        @ROWS_ATTR
        @SHOWDATAPAGER_ATTR
        @SHOWROWCONTROLS_ATTR
        @PANELSTYLE_ATTR
        @STYLE_ATTR
    </tag>

    <tag>
        <description><![CDATA[
	The filterColumn Composite Component defines a filterable column in a filterTable
    ]]></description>
        <display-name>Filter Column Composite Component (used in conjuction with
            the filterTable Component)
        </display-name>
        <name>filterColumn</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:filterTable bean="#{filterTableExampleBean.filterTableBean}"
	id="filterTable">
	<ice-cc:column title="ID" value="#{row.id}" />
	<ice-cc:filterColumn title="First Name" value="#{row.firstName}"
		property="firstName" />
	<ice-cc:filterColumn title="Last Name" value="#{row.lastName}"
		property="lastName" />
</ice-cc:filterTable>
     ]]></example>
        <attribute>
            <name>value</name>
            <required>true</required>
            <type>java.lang.Object</type>
            <description><![CDATA[
        The value attribute defines the data to be displayed in the column body
      ]]></description>
        </attribute>
        <attribute>
            <name>inputStyle</name>
            <required>false</required>
            <description>Passed through to the style attribute on ice:inputText
                component
            </description>
        </attribute>
        @COLUMN_PROPERTY_ATTR
        @COLUMN_TITLE_ATTR
    </tag>

    <!-- NUMBER SPINNER -->

    <tag>
        <description><![CDATA[
       <h2>Number Spinner Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>The Number Spinner allows you to scroll number values up and down</li>
       		<li>The increment and decrement step value can be set on the bean</li>
       		<li>A listener interface allows method callbacks on value change events</li>
       		<li>Minimum and maxium values can be specified</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
		   <li>Create an instance of the NumberSpinner class in your managed bean</li>
		   <li>Specify an instance of INumberSpinnerListener in the constructor if you would like to receive value change events</li>
		   <li>Specify the minimum and maximum values for the spinner if you would like to limit the spinner's values</li>
		   <li>Use the numberSpinner tag in your page (eg. ice-cc:numberSpinner).  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
		   <li>Bind the 'bean' attribute on the tag to your managed bean property (eg. bean="#{myBean.spinner})</li>
		   <li>Set the 'incrementBy' property on the NumberSpinner object (default is 1)</li>
		</ol>
    ]]></description>
        <display-name>Number Spinner</display-name>
        <name>numberSpinner</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:richDataGrid id="richDataGrid"
	bean="#{richDataGridExampleBean.richDataGridBean}"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <required>true</required>
            <type>com.icesoft.faces.facelets.component.spinner.NumberSpinner
            </type>
            <description><![CDATA[
        The bean attribute must resolve to an instance of the NumberSpinner class.
      ]]></description>
        </attribute>
        <attribute>
            <name>readonly</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:inputText component</description>
        </attribute>
        <attribute>
            <name>partialSubmit</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:inputText component (default
                true)
            </description>
        </attribute>
        <attribute>
            <name>styleClassInput</name>
            <required>false</required>
            <description>Passed through to styleClass attribute of ice:inputText
                component
            </description>
        </attribute>
        <attribute>
            <name>effect</name>
            <required>false</required>
            <description>Passed through to ice:inputText component</description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>Passed through to ice:inputText component</description>
        </attribute>
        @DISABLED_ATTR
    </tag>

    <!-- POLLING -->
    <tag>
        <description><![CDATA[

	<h2>The Polling Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>Provides an easy way to do client-side polling</li>
       		<li>The polling interval is a configurable parameter of the component</li>
       		<li>A PhaseListener will identify a polling request and perform the necessary bean logic</li>
        	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>If you would like to execute code at every poll, add PollingListener.java to your application, and register PollingListener as a phase-listener in your faces-config.xml </li>
			   <li>Add the ice-cc:polling tag to your page, inside a form</li>
			   <li>Set the 'interval' attribute of the tag (in milliseconds)</li>
		</ol>
    ]]></description>
        <display-name>Polling Composite Component</display-name>
        <name>polling</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:polling interval="#{pollingExampleBean.spinner.value}"/>
     ]]></example>
        <attribute>
            <name>interval</name>
            <type>java.lang.integer</type>
            <required>false</required>
            <description>Sets the interval for polling updates (in
                milliseconds)(default 4000)
            </description>
        </attribute>
    </tag>

    <!-- PROGRESS ASYNC -->
    <tag>
        <description><![CDATA[
	<h2>The Async Progress Composite Component</h2>
	The Async Progress Component allows you to monitor long-running server-side processes with a progress bar
	<h3>Features</h3>
	<ul>
		<li>An indeterminate ice:outputProgress component monitors the progress of a Runnable</li>
    	<li>Pass any managed bean Runnable into the ProgressAsyncBean</li>
	</ul>
	<h3>How To Use</h3>
	<ol>
  		<li>Create a Runnable in your web application managed bean</li>
   		<li>If your application does not have ICEfaces' RenderManager registered as a managed bean,
      add it as an application scope managed bean with managed-bean-name renderManager in faces-config.xml</li>
   		<li>Add a reference to ProgressAsyncBean as a managed property to your managed bean</li>
   		<li>In your managed bean setter for ProgressAsyncBean, also set ProgressAsyncBean's Runnable to the Runnable in your managed bean</li>
	</ol>
    ]]></description>
        <display-name>Progress Async Composite Component</display-name>
        <name>progressAsync</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:progressAsync id="myLongRunningProcess"
	bean="#{progressAsyncExampleBean}"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type></type>
            <required>true</required>
            <description>Must be a managed bean with a property named
                'progressAsyncBean' of type
                com.icesoft.faces.facelets.component.progress.ProgressAsyncBean
            </description>
        </attribute>
        <attribute>
            <name>style</name>
            <required>false</required>
            <description>Passed through to ice:outputProgress component
            </description>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <required>false</required>
            <description>Passed through to ice:outputProgress component
            </description>
        </attribute>
        <attribute>
            <name>styleClassButton</name>
            <required>false</required>
            <description>Passed through to ice:commandButton component
            </description>
        </attribute>
    </tag>

    <!--  RICH DATA GRID -->

    <tag>
        <description><![CDATA[
		<h2>The Rich Data Grid Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>Direct, inline editing of row data</li>
			<li>Column filtering</li>
			<li>Create new rows</li>
			<li>Delete rows</li>
			<li>Column reordering</li>
			<li>Column auto-sorting</li>
			<li>Column resizing</li>
			<li>Auto-pagination and pagination info</li>
			<li>Complete event model and listener callbacks for all table events</li>
			<li>Hide and show columns</li>
			<li>Edits are done in a safe 'edit space' and the direct objects are untouched until the data is saved</li>
			<li>When a row is selected for editing, it becomes locked in edit mode until the changes are either saved or cancelled</li>
			<li>Supports editing of text, list, date, and boolean data</li>
			<li>Columns can be made editable or non-editable</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Add the &lt;ice-cc:richDataGrid/&gt; tag to your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
			<li>Bind the 'bean' attribute to an instance of RichDataGridBean </li>
			<li>If you would like to receive event notifications, implement the IEditableTableEventListener class and pass it to the constructor of the RichDataGridBean </li>
			<li>For auto-generation of columns, simply pass in a List of items to the RichDataGridBean constructor</li>
			<li>To specify columns, pass in an array of RichDataColumn objects to the RichDataGridBean constructor</li>
		</ol>
    ]]></description>
        <display-name>Rich Data Grid</display-name>
        <name>richDataGrid</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:richDataGrid id="richDataGrid"
	bean="#{richDataGridExampleBean.richDataGridBean}"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <description><![CDATA[
        A value binding to the RichDataGridBean instance.
      ]]></description>
            <name>bean</name>
            <required>true</required>
            <type>
                com.icesoft.faces.facelets.component.table.richdatagrid.RichDataGridBean
            </type>
        </attribute>
        <attribute>
            <name>rendered</name>
            <type>java.lang.Boolean</type>
            <required>false</required>
            <description>Flag indicating whether this component should be
                rendered (during Render Response Phase), or processed on any
                subsequent form submit (default true).
            </description>
        </attribute>
        <attribute>
            <name>deleteRows</name>
            <type>java.lang.Boolean</type>
            <required>false</required>
            <description>Component level ability to delete table rows. Defaults
                to true.
            </description>
        </attribute>
        <attribute>
            <name>addRows</name>
            <type>java.lang.Boolean</type>
            <required>false</required>
            <description>Component level ability to add table rows. Defaults to
                true.
            </description>
        </attribute>
        <attribute>
            <name>editRows</name>
            <type>java.lang.Boolean</type>
            <required>false</required>
            <description>Component level ability to edit table rows. Defaults to
                true.
            </description>
        </attribute>
        <attribute>
            <name>style</name>
            <required>false</required>
            <description>Passed through to the html table tag that contains this
                component's markup
            </description>
        </attribute>
        @ROWS_ATTR
        @SHOWDATAPAGERINFO_ATTR
        @SHOWDATAPAGER_ATTR
        @SHOWROWCONTROLS_ATTR
        @PANELSTYLE_ATTR
        <attribute>
            <name>cellpadding</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>cellspacing</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>columnClasses</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>rowClasses</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>footerClass</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>headerClass</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>headerClasses</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>rules</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>summary</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>Passed through to ice:dataTable</description>
        </attribute>
        <attribute>
            <name>multiple</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Pass through attribute to ice:rowSelector component
            </description>
        </attribute>
        <attribute>
            <name>preStyleOnSelection</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Pass through attribute to ice:rowSelector component
            </description>
        </attribute>
    </tag>

    <!-- RICH TABS -->

    <tag>
        <description><![CDATA[
	<h2>The Rich Tabs Composite Component</h2>
	<h3>Features</h3>
	<ul>
		<li>The Rich Tabs composition component offers a more simplified and
		flexible mechanism for creating a tab-based layout</li>
		<li>Unlike the ice:panelTabSet, the Tabs component does not need to be included in a form, so tab content can be broken into multiple forms for performance</li>
		<li>The Rich Tabs component can include any other content, images,
		and components within the header</li>
		<li>The tabs can be reordered by dragging a tab between other tabs</li>
	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Use the &lt;ice-cc:richTabs/&gt; tag on your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
			<li>Bind the 'bean' attribute of the tag to an instance of TabsController.</li>
			<li>When creating the TabsController bean, add instances of Tab for each Tab you would like</li>
			<li>If you would like to nest forms within the tab content, set outsideForm='true' on the richTabs tag</li>
		</ol>
    ]]></description>
        <display-name>Rich Tabs</display-name>
        <name>richTabs</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:richTabs id="myTabs"
	bean="#{tabsExampleBean.tabsController}"
	outsideForm="false"
	style="width: 300px;height:400px;"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>com.icesoft.faces.facelets.component.tabs.TabsController
            </type>
            <required>true</required>
            <description>Must resolve to an instance of the TabsController class
            </description>
        </attribute>
        <attribute>
            <name>outsideForm</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description><![CDATA[
        If the component is outside of a form (default true)
      ]]></description>
        </attribute>
        <attribute>
            <name>style</name>
            <required>false</required>
            <description>Passed through to the ice:panelGroup tag that contains
                this component's markup
            </description>
        </attribute>
        <attribute>
            <name>styleClassPanelPositioned</name>
            <required>false</required>
            <description>Passed through to the ice:panelPositioned tag
            </description>
        </attribute>
        <attribute>
            <name>disabled</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the ice:panelPositioned tag and
                ice:commandLinks
            </description>
        </attribute>
        <attribute>
            <name>styleTabLink</name>
            <required>false</required>
            <description>Passed through to the style attribute on the current
                tab ice:commandLink
            </description>
        </attribute>
        <attribute>
            <name>styleClassTabLink</name>
            <required>false</required>
            <description>Passed through to the styleClass attribute on the
                current tab ice:commandLink
            </description>
        </attribute>
        <attribute>
            <name>styleClassTabContainer</name>
            <required>false</required>
            <description>Passed through to the container of the tab content
            </description>
        </attribute>
    </tag>


    <!-- ROUND BOX -->


    <!-- ROUND CORNERS -->

    <tag>
        <description><![CDATA[
		<h2>The Round Corners Layout Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>The Round Corners Composition Component can be used to create rounded layouts</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Use the roundCorners tag in your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
			<li>Set the 'id' attribute of the tag</li>
			<li>Set the foreground color with the 'fgcolor' attribute</li>
			<li>Set the background color with the 'bgcolor' attribute</li>
			<li>Set the 'corners' attribute (space-separated list of corners, 'tl', 'tr', 'bl', 'br', or 'all')</li>
		</ol>
    ]]></description>
        <display-name>Round Corners Panel</display-name>
        <name>roundCorners</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:roundCorners id="id" bgcolor="orange" fgcolor="#FFF" corners="all"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bgcolor</name>
            <required>true</required>
            <description>The background color</description>
        </attribute>
        <attribute>
            <name>fgcolor</name>
            <required>true</required>
            <description>The foreground color</description>
        </attribute>
        <attribute>
            <name>corners</name>
            <required>true</required>
            <description>Space-separated list of corners to round, 'tl', 'tr',
                'bl', 'br', or 'all'
            </description>
        </attribute>
    </tag>

    <!-- SCHEDULE -->
    <tag>
        <description><![CDATA[
	<h2>The Schedule Composite Component</h2>
	<h3>Features</h3>
	<ul>
	    <li>The component is a viewer and does not create calendar events.  You must implement CalendarViewService to supply the component with calendar events.</li>
        <li>The calendar has day, week, month and year views.</li>
        <li>Toggle between a 12 or 24 hour day view.</li>
        <li>CalendarEvents can be scheduled times or "all day" events.</li>
        <li>The component will only retrieve CalendarEvents associated with the current view.</li>
        <li>Configure the calendar to use the server timezone (default), hard code a timezone or use the EL to pass in a session scope timezone.</li>
        <li>The calendar has been styled to automatically resize to the available space.</li>
	</ul>
	<h3>How To Use</h3>
	<ol>
		<li>Use CalendarEvent to represent a calendar event in your model</li>
		<li>Implement CalendarViewService in your model and register the implementing class as an application scope bean in faces-config</li>
		<li>Register CalendarController as a request scope bean in faces-config. Bind this bean to the schedule tag's 'bean' attribute</li>
		<li>Add the CalendarViewService implementation as a managed-property with property-name 'calendarViewService' to the CalendarController</li>
		<li>Register CalendarViewUtil as a session scope bean in faces-config with managed-bean-name "calendarViewUtil"</li>
		<li>By default the calendar will now format all Dates to the server TimeZone</li>
		<li>To change the default TimeZone add a managed-property to "calendarViewUtil" named "timeZoneId" with a valid TimeZone id value</li>
		<li>To apply a session scoped TimeZone to each instance of the calendar, use the EL in the "timeZoneId" value. For instance, #{User.timezoneId}</li>
		<li>Add &lt;ice-cc:schedule/&gt; to page(s) where you want to view the schedule.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
	</ol>
    ]]></description>
        <display-name>Schedule Composite Component</display-name>
        <name>schedule</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:schedule bean="#{calendarController}" id="mySched"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>
                com.icesoft.faces.facelets.component.schedule.CalendarController
            </type>
            <required>true</required>
            <description>Must resolve to an instance of CalendarController class
            </description>
        </attribute>
    </tag>

    <!-- SELECT DATE INTERVAL -->
    <tag>
        <description><![CDATA[
		<h2>The Select Date Interval Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>Set a start and end date</li>
       		<li>Optionally add time (hours and minutes)</li>
       		<li>Specify the component timezone</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Instantiate two SelectInputCalendar objects in your bean. One for the start date, one for the end date.</li>
			<li>If you wish to include time (hours, minutes) instantiate SelectInputTime objects instead.</li>
			<li>These objects will default to the server timezone. If you wish to specify a timezone, pass a TimeZone object in to the constructor.</li>
			<li>Add the &lt;ice-cc:selectDateInterval/&gt; tag to you page, binding the start and end dates in your bean to the 'start' and 'end' attributes.</li>
			<li>If you wish to include time, set the 'renderTime' attribute to true.</li>
		</ol>
    ]]></description>
        <display-name>Select Input Time Composite Component</display-name>
        <name>selectDateInterval</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:selectDateInterval id="interval1"
	renderTime="false"
	start="#{selectDateIntervalExampleBean.startCalendar}"
	end="#{selectDateIntervalExampleBean.endCalendar}"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>start</name>
            <type>
                com.icesoft.faces.facelets.component.select.SelectInputCalendar
            </type>
            <required>true</required>
            <description><![CDATA[
        Must resolve to an instance of SelectInputCalendar (or SelectInputTime when time is required)
      ]]></description>
        </attribute>
        <attribute>
            <name>end</name>
            <type>
                com.icesoft.faces.facelets.component.select.SelectInputCalendar
            </type>
            <required>true</required>
            <description><![CDATA[
        Must resolve to an instance of SelectInputCalendar (or SelectInputTime when time is required).
      ]]></description>
        </attribute>
        <attribute>
            <name>renderTime</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Sets if the time of day is required. When true, the
                start and end attributes must resolve to an instance of
                com.icesoft.faces.facelets.component.select.SelectInputTime
                (default false)
            </description>
        </attribute>
        <attribute>
            <name>disabled</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to the disabled attribute in
                ice:selectOneMenu components
            </description>
        </attribute>
        <attribute>
            <name>styleClassTable</name>
            <required>false</required>
            <description>Applied to ice:panelGrid that contains the
                ice:selectOneMenu components
            </description>
        </attribute>
        <attribute>
            <name>styleMonth</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>styleClassMonthh</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>effectMonth</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>titleMonth</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>styleDay</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>styleClassDay</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>effectDay</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>titleDay</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>styleYear</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>styleClassYear</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>effectYear</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>titleYear</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>styleHour</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>styleClassHour</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>effectHour</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>titleHour</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>styleMinute</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>styleClassMinute</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>effectMinute</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
        <attribute>
            <name>titleMinute</name>
            <required>false</required>
            <description>Passed through to the appropriate ice:selectOneMenu
            </description>
        </attribute>
    </tag>

    <!-- SELECT INPUT CALENDAR -->
    <tag>
        <description><![CDATA[
Allows a simple input of date values
    ]]></description>
        <display-name>Select Input Calendar Composite Component</display-name>
        <name>selectInputCalendar</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:selectInputCalendar id="myDate" value="#{value}"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>value</name>
            <type>
                com.icesoft.faces.facelets.component.select.SelectInputCalendar
            </type>
            <required>true</required>
            <description>Must resolve to an instance of the SelectInputCalendar
                class
            </description>
        </attribute>
    </tag>


    <!-- SELECT INPUT TIME -->
    <tag>
        <description><![CDATA[
	The selectInputTime Composite Component allows time input
    ]]></description>
        <display-name>Select Input Time Composite Component</display-name>
        <name>selectInputTime</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:selectInputTime id="myTime" value="#{time}"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>value</name>
            <type>com.icesoft.faces.facelets.component.select.SelectInputTime
            </type>
            <required>true</required>
            <description>Must resolve to an instance of the SelectInputTime
                class
            </description>
        </attribute>

    </tag>


    <!-- SELECTION TREE -->

    <tag>
        <description><![CDATA[
		<h2>The Selection Tree Composite Component</h2>
	<h3>Renders a hierarchical tree view of selected nodes</h3>
       <h3>Features</h3>
       <ul>
       		<li>Selecting a checkbox in the tree will select all of its children</li>
       		<li>Any parent in the tree will show partial selection if any of its children are checked</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>Create an instance of the SelectionTreeModel class in your managed bean</li>
			   <li>Create the tree model from SelectionTreeNode objects and attach the root node to the SelectionTreeModel</li>
			   <li>Use the &lt;ice-cc:selectionTree/&gt; tag in your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
			   <li>Bind the 'tree' attribute on the tag to your managed bean property (eg. spinner="#{myBean.tree})</li>
		</ol>
    ]]></description>
        <display-name>Selection Tree</display-name>
        <name>selectionTree</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:selectionTree tree="#{selectionTreeExampleBean.treeModel}">
	<ice:outputText value="#{node.userObject.label}"/>
</ice-cc:selectionTree>
     ]]></example>
        <attribute>
            <name>tree</name>
            <type>
                com.icesoft.faces.facelets.component.selectiontree.SelectionTreeModel
            </type>
            <required>true</required>
            <description>Must resolve to an instance of the SelectionTreeModel
            </description>
        </attribute>
        <attribute>
            <name>imageDir</name>
            <required>false</required>
            <description><![CDATA[
        String passed through to imageDir attribute of ice:tree component.  Default "/xmlhttp/css/xp/css-images/".
      ]]></description>
        </attribute>
        <attribute>
            <name>hideRootNode</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:tree (default false)
            </description>
        </attribute>
        <attribute>
            <name>hideNavigation</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:tree (default false)
            </description>
        </attribute>
        <attribute>
            <name>keyboardNavigationEnabled</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:tree (default true)</description>
        </attribute>
    </tag>
    <attribute>
        <name>style</name>
        <required>false</required>
        <description>Passed through to ice:tree</description>
    </attribute>
    <attribute>
        <name>styleClass</name>
        <required>false</required>
        <description>Passed through to ice:tree</description>
    </attribute>

    <!-- SELECT LOCALE -->

    <tag>
        <description><![CDATA[
       <h2>The Locale Selector Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>The component will render an ice:selectOneMenu component with a list of the application's supported locales.</li>
        	<li>Selecting a different language will dynamically apply the selected resource bundle to the user session.</li>
            <li>If no locales have been specified in the application, or only one locale is available, the component will not render anything.</li>
       </ul>
       <h3>How To Use</h3>
		<ol>
			 <li>Add &lt;ice-cc:selectLocale&gt; to any page where you want to make a locale selection</li>
			 <li>Add the attribute locale="#{localeController.sessionLocale}" to your view tag(s)</li>
			 <li>Ensure a resource-bundle has been specified in faces-config.xml</li>
			 <li>Ensure localized versions of the resource-bundle are present with language locale and possibly country locale. ie: messages_en.properties messages_en_US.properties</li>
			 <li>Ensure each locale is registered as a supported-locale under locale-config in faces-config.xml</li>
		</ol>
    ]]></description>
        <display-name>Select Locale</display-name>
        <name>selectLocale</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:selectLocale styleClass="localeStyle"/>
     ]]></example>
        <attribute>
            <name>disabled</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>effect</name>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>required</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu (default false)
            </description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>style</name>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
    </tag>

    <!-- SELECT ONE STATE PROVINCE -->

    <tag>
        <description><![CDATA[
       <h2>The Select State or Province Composite Component</h2>
       <h3>Dynamically choose a US state or Canadian province</h3>
       <h3>Features</h3>
       <ul>
       		<li>The component will render an ice:selectOneMenu component with a list of United States states or Canadian provinces.</li>
		<li>Selecting a different country will dynamically change the list bound to the component.</li>
		<li>If the United States or Canada are not specified, the component will not render.</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Add an instance of SelectOneStateProvince with getter and setter, to your bean</li>
			<li>Add an &lt;ice-cc:selectOneStateProvince/&gt; tag to your page</li>
			<li>Pass a reference to the bean into the component using the "bean" attribute</li>
			<li>Specify the country in the "country" attribute. Use ISO 3166-1 two-letter country codes US or CA</li>
			<li>Pass in the label (and value) of the first SelectItem using the "firstSelectItem" attribute</li>
		</ol>
    ]]></description>
        <display-name>Select State or Province</display-name>
        <name>selectOneStateProvince</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:selectOneStateProvince id="stateOrProvince"
	bean="#{selectOneStateProvinceExampleBean}"
	country="#{selectOneStateProvinceExampleBean.country}"
	styleClass="stateProvStyle"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>
                com.icesoft.faces.facelets.component.selectOneStateProvince.SelectOneStateProvince
            </type>
            <required>true</required>
            <description><![CDATA[
        Bean containg an instance of SelectOneStateProvince with a getter and setter.
      ]]></description>
        </attribute>
        <attribute>
            <name>country</name>
            <required>false (true to render)</required>
            <description><![CDATA[
        ISO 3166-1 two-letter country code US or CA.
      ]]></description>
        </attribute>
        <attribute>
            <name>firstSelectItem</name>
            <required>false</required>
            <description><![CDATA[
        String label and value of first SelectItem in the ice:selectOneMenu.
      ]]></description>
        </attribute>
        <attribute>
            <name>disabled</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>effect</name>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>required</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu (default false)
            </description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>style</name>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <required>false</required>
            <description>Passed through to ice:selectOneMenu</description>
        </attribute>
    </tag>

    <!-- SLIDER -->

    <tag>
        <description><![CDATA[
       <h2>The Slider Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>Can be used in vertical or horizontal position</li>
			<li>The rail size can be set to a custom length</li>
			<li>The image can be customized</li>
			<li>The min and max values can be customized</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Add the &lt;ice-cc:slider/&gt; tag to your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
			<li>Bind the 'value' attribute to an integer property on a managed bean</li>
			<li>Set the 'id' attribute</li>
			<li>Set the 'min' attribute (optional)</li>
			<li>Set the 'max' attribute (optional)</li>
			<li>Set the 'orientation' attribute (optional)</li>
			<li>Set the 'railSize' attribute (optional)</li>
			<li> Set the 'thumbImage' attribute to customize the image (optional)</li>
			<li>If you would like continuous updates to the server, as the slider is moved, specify updateOnEvent="valueChange"</li>
		</ol>
    ]]></description>
        <display-name>Slider Composite Component</display-name>
        <name>slider</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:slider id="vertSlider"
	value="#{sliderExampleBean.value2}"
	min="-500" max="500"
	orientation="vertical" thumbImage="./images/icefaces-icon.png"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>value</name>
            <type>java.lang.integer</type>
            <required>true</required>
            <description>An integer property</description>
        </attribute>
        <attribute>
            <name>min</name>
            <type>java.lang.integer</type>
            <required>false</required>
            <description>An integer value or property (default 0)</description>
        </attribute>
        <attribute>
            <name>max</name>
            <type>java.lang.integer</type>
            <required>false</required>
            <description>An integer value or property (default 100)
            </description>
        </attribute>
        <attribute>
            <name>thumbImage</name>
            <required>false</required>
            <description>A url of an image. Basic image included.</description>
        </attribute>
        <attribute>
            <name>railSize</name>
            <required>false</required>
            <description>CSS length value (default 200px)</description>
        </attribute>
        <attribute>
            <name>orientation</name>
            <required>false</required>
            <description>vertical or horizontal (default horizontal)
            </description>
        </attribute>
        <attribute>
            <name>updateOnEvent</name>
            <required>false</required>
            <description>'slideEnd', updates the value binding when the slider
                stops, or 'valueChange',
                udpates the value binding continuously as the slider is moved,
                (default slideEnd)
            </description>
        </attribute>
    </tag>


    <!-- SLIDE SHOW -->

    <tag>
        <description><![CDATA[
	<h2>The Slide Show Composite Component</h2>
	<h3>Features</h3>
	<ul>
		<li>This component will generate a slide show that progresses
		automatically through the set of defined slides.</li>
		<li>the duration of the slides as well as the duration of the
		transitions can be configured.</li>
		<li>Does not require any bean code.</li>
	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Add an &lt;ice-cc:slideshow/&gt; tag to your page</li>
			<li>Set the slideDuration and transitionDuration attributes (each in seconds)</li>
			<li>Add an &lt;ice-cc:slide image="image/path"/&gt; elements as children of the slideshow element. Alternatively, you could use the &lt;ice-cc:slides value="{valuebound array of strings}"/&gt; to dynamically generate the list</li>
		</ol>
    ]]></description>
        <display-name>Slide Show</display-name>
        <name>slideshow</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:slideshow id="static"
	style="width: 476px; height: 248px; border-color: #000; border-style: solid; border-width: thin;"
	slideDuration="#{slideShowBean.slideDuration}" transitionDuration="0.75">
	<ice-cc:slide image="images/slides/slideshow-component-1.jpg" />
	<ice-cc:slide image="images/slides/slideshow-component-2.jpg" />
	<ice-cc:slide image="images/slides/slideshow-component-3.jpg" />
	<ice-cc:slide image="images/slides/slideshow-component-4.jpg" />
	<ice-cc:slide image="images/slides/slideshow-component-5.jpg" />
</ice-cc:slideshow>
     ]]></example>
        @ID_ATTR
        @STYLE_ATTR
        <attribute>
            <name>transitionDuration</name>
            <required>false</required>
            <type>java.lang.float</type>
            <description><![CDATA[
        The time (in seconds) to transition through a slide fade in and out (default 1.0)
      ]]></description>
        </attribute>
        <attribute>
            <name>slideDuration</name>
            <required>false</required>
            <type>java.lang.float</type>
            <description><![CDATA[
        The time (in seconds) for the slide to update (default 5.0)
      ]]></description>
        </attribute>
    </tag>

    <tag>
        <description><![CDATA[
	Slide Composite Component (for use with the slideshow Component)
    ]]></description>
        <display-name>Slide Composite Component</display-name>
        <name>slide</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:slideshow id="static"
	style="width: 476px; height: 248px; border-color: #000; border-style: solid; border-width: thin;"
	slideDuration="#{slideShowBean.slideDuration}" transitionDuration="0.75">
	<ice-cc:slide image="images/slides/slideshow-component-1.jpg" />
	<ice-cc:slide image="images/slides/slideshow-component-2.jpg" />
	<ice-cc:slide image="images/slides/slideshow-component-3.jpg" />
	<ice-cc:slide image="images/slides/slideshow-component-4.jpg" />
	<ice-cc:slide image="images/slides/slideshow-component-5.jpg" />
</ice-cc:slideshow>
     ]]></example>
        <attribute>
            <name>image</name>
            <required>false</required>
            <description>A URL path for the image</description>
        </attribute>
        <attribute>
            <name>styleClassImage</name>
            <required>false</required>
            <description>Passed through to img tag</description>
        </attribute>
    </tag>


    <tag>
        <description><![CDATA[
	Slides Composite Component (for use with the slideshow Component)
    ]]></description>
        <display-name>Slides Composite Component</display-name>
        <name>slides</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:slideshow id="static"
	style="width: 476px; height: 248px; border-color: #000; border-style: solid; border-width: thin;"
	slideDuration="#{slideShowBean.slideDuration}" transitionDuration="0.75">
	<ice-cc:slides value="#{slideShowBean.slides}" />
</ice-cc:slideshow>
     ]]></example>
        <attribute>
            <name>value</name>
            <required>true</required>
            <description>An array of Strings, which each define a URL of the
                slide image
            </description>
        </attribute>

    </tag>

    <!-- STATUS BAR -->

    <tag>
        <description><![CDATA[

	<h2>The Status Bar Composite Component</h2>
	<h3>Scrolls prominent information across the screen</h3>
       <h3>Features</h3>
       <ul>
       		<li>Hover over the Status Bar to stop the text from scrolling</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Use the &lt;ice-cc:statusBar/&gt; tag</li>
			<li>Set the width attribute to the desired length (in pixels)</li>
			<li>Set the value attribute to the message</li>
		</ol>
    ]]></description>
        <display-name>Status Bar</display-name>
        <name>statusBar</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:statusBar value="#{statusBarExample.message}"
	width="#{statusBarExample.width.value}"/>
     ]]></example>
        <attribute>
            <name>width</name>
            <required>false</required>
            <description>The width of the status bar (in pixels)(default 200)
            </description>
        </attribute>
        <attribute>
            <name>value</name>
            <required>false</required>
            <description>The message to be displayed</description>
        </attribute>

    </tag>

    <!-- TAB -->

    <tag>
        <description><![CDATA[
	Tab used in the the tabView Composite Component
    ]]></description>
        <display-name>tab</display-name>
        <name>tab</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:tabView id="myTabs" orientation="#{tabViewExampleBean.orientation}"
	outsideForm="false">
	<ice-cc:tab tabId="tab1" label="Tab 1">
		<div style="background: #FFF;padding: 8px;">
			<h2>This is tab 1 content</h2>
			<ice:graphicImage value="/images/icesailor.jpg"/>
		</div>
	</ice-cc:tab>
	<ice-cc:tab tabId="tab2" label="Tab 2">
		<div style="background: #FFF;padding: 8px;">
			<h2>This is tab 2 content</h2>
			<ice:graphicImage value="/images/icecar.jpg"/>
		</div>
	</ice-cc:tab>
	<ice-cc:tab tabId="tab3" label="Tab 3">
		<div style="background: #FFF;padding: 8px;">
			<h2>This is tab 3 content</h2>
			<ice:graphicImage value="/images/icebreaker.jpg"/>
		</div>
	</ice-cc:tab>
</ice-cc:tabView>
     ]]></example>
        <attribute>
            <name>tabId</name>
            <required>true</required>
            <description><![CDATA[
        A unique id for the tab
      ]]></description>
        </attribute>
        <attribute>
            <name>label</name>
            <required>false</required>
            <description><![CDATA[
        Label used in the tab
      ]]></description>
        </attribute>
    </tag>

    <!-- TAB VIEW -->

    <tag>
        <description><![CDATA[
		<h2>The Tab View Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>The Tab View composition component offers a more simplified and
			flexible mechanism for creating a tab-based layout, using the YUI tabView javascript component</li>
			<li>Unlike the &lt;ice:panelTabSet&gt;, the &lt;ice-cc:tabView&gt; component does not need to be included in a form, so tab content can be broken into multiple forms for performance</li>
			<li>The Tabs component can include any other content, images,
			and components within the header</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			 <li>Add the &lt;ice-cc:tabView/&gt; tag to your page.</li>
			 <li>Set the id attribute</li>
			 <li>Nest &lt;ice-cc:tab/&gt; tags for each tab you would like</li>
			 <li>If you would like to nest forms within the tab content, set outsideForm='true' on the richTabs tag</li>
		</ol>
    ]]></description>
        <display-name>Tab View</display-name>
        <name>tabView</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:tabView id="myTabs" orientation="#{tabViewExampleBean.orientation}"
	outsideForm="false">
	<ice-cc:tab tabId="tab1" label="Tab 1">
		<div style="background: #FFF;padding: 8px;">
			<h2>This is tab 1 content</h2>
			<ice:graphicImage value="/images/icesailor.jpg"/>
		</div>
	</ice-cc:tab>
	<ice-cc:tab tabId="tab2" label="Tab 2">
		<div style="background: #FFF;padding: 8px;">
			<h2>This is tab 2 content</h2>
			<ice:graphicImage value="/images/icecar.jpg"/>
		</div>
	</ice-cc:tab>
	<ice-cc:tab tabId="tab3" label="Tab 3">
		<div style="background: #FFF;padding: 8px;">
			<h2>This is tab 3 content</h2>
			<ice:graphicImage value="/images/icebreaker.jpg"/>
		</div>
	</ice-cc:tab>
</ice-cc:tabView>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>orientation</name>
            <required>false</required>
            <description><![CDATA[
        'top', 'bottom', 'left', or 'right' (default 'top')
      ]]></description>
        </attribute>
        <attribute>
            <name>outsideForm</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description><![CDATA[
        If the component is outside of a form (default true)
      ]]></description>
        </attribute>
        <attribute>
            <name>selected</name>
            <type>java.lang.integer</type>
            <required>false</required>
            <description>Index of the selected tab (default 0)</description>
        </attribute>
        @STYLE_ATTR
    </tag>

    <!-- TEXT SPINNER -->

    <tag>
        <description><![CDATA[
		<h2>The Text Spinner Composite Component</h2>
       <h3>Features</h3>
       <ul>
       		<li>The Text Spinner allows you to scroll text values up and down</li>
       		<li>The increment and decrement step value can be set on the bean</li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
		   <li>Create an instance of the TextSpinner class in your managed bean</li>
		   <li>Add the &lt;ice-cc:textSpinner/&gt; tag to your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
		   <li>Bind the 'bean' attribute on the tag to your managed bean property (eg. bean="#{myBean.spinner})</li>
		</ol>
    ]]></description>
        <display-name>Text Spinner</display-name>
        <name>textSpinner</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:textSpinner id="textSpinnerDemo" bean="#{textSpinnerExampleBean.spinner}"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>com.icesoft.faces.facelets.component.spinner.TextSpinner
            </type>
            <required>true</required>
            <description><![CDATA[
        The bean attribute must resolve to an instance of the TextSpinner class.
      ]]></description>
        </attribute>
        <attribute>
            <name>escape</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:outputText component
            </description>
        </attribute>
        <attribute>
            <name>nospan</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:outputText component
            </description>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <required>false</required>
            <description>Passed through to ice:outputText component
            </description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>Passed through to ice:outputText component
            </description>
        </attribute>
        @DISABLED_ATTR
    </tag>

    <!-- TREE TABLE -->

    <tag>
        <description><![CDATA[
		<h2>The Tree Table Composite Component</h2>
		<h3>Renders a tabular version of a tree model</h3>
       <h3>Features</h3>
       <ul>
       		<li>The Tree Table is driven by standard Swing TreeModel</li>
        <li>The Tree Table nodes can be expanded and collapsed by clicking
            on the folder icons
        </li>
        <li>Dynamic changes to the TreeModel and automatically shown in
            the Tree Table
        </li>
        <li>Tree Tables rows display colour-coding according to the
            level in the TreeModel
        </li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			<li>Create an instance of the TreeTable class in your managed bean</li>
			<li>Create the tree model from TreeTableNode objects</li>
			<li>Add the &lt;ice-cc:treeTable/&gt; tag to your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
			<li>Bind the 'bean' attribute to your TreeTable bean</li>
			<li>Add &lt;ice-cc:treeTableColumn/&gt;s for each column you would like in your table</li>
			<li>In each &lt;ice-cc:treeTableColumn/&gt; use any other component and reference row-level properties through the 'row' variable name</li>
		</ol>
    ]]></description>
        <display-name>Tree Table Composite Component</display-name>
        <name>treeTable</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:treeTable bean="#{treeTableExampleBean.treeTable}"
    columnWidths="100px,80px,60px,50px,120px,6S0px,80px"
    levelColors="#FFE900,#FFF04F,#FFF79F,#FFFCDF">
    <ice-cc:treeTableColumn header="Organization">
        <ice:outputText value="#{row.data}" rendered="#{row.level eq 0}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Region">
        <ice:outputText value="#{row.data}" rendered="#{row.level eq 1}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="City">
        <ice:outputText value="#{row.data}" rendered="#{row.level eq 2}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Name">
        <ice:outputText value="#{row.data}" rendered="#{row.data.class.simpleName eq 'Employee'}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Phone">
        <ice:outputText value="#{row.data.phone}" rendered="#{row.data.class.simpleName eq 'Employee'}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Born">
        <ice:outputText value="#{row.data.birthDate}" rendered="#{row.data.class.simpleName eq 'Employee'}">
        	<f:convertDateTime dateStyle="medium"/>
        </ice:outputText>
    </ice-cc:treeTableColumn>
</ice-cc:treeTable>
     ]]></example>
        <attribute>
            <name>bean</name>
            <type>com.icesoft.faces.facelets.component.treetable.TreeTable
            </type>
            <required>true</required>
            <description><![CDATA[
        The bean attribute must resolve to an instance of the TreeTable class.
      ]]></description>
        </attribute>
        @COLUMNWIDTHS_ATTR
        <attribute>
            <name>levelColors</name>
            <required>false</required>
            <description><![CDATA[
        A comma-delimited list of color codes for each level in the tree
      ]]></description>
        </attribute>
        <attribute>
            <name>lineImage</name>
            <required>false</required>
            <description>Passed through to ice:graphicImage component
            </description>
        </attribute>
        <attribute>
            <name>nodeImage</name>
            <required>false</required>
            <description>Passed through to ice:graphicImage component
            </description>
        </attribute>
    </tag>


    <tag>
        <description><![CDATA[
	The treeTableColumn Composite Component renders a column in the treeTable
    ]]></description>
        <display-name>Tree Table Column</display-name>
        <name>treeTableColumn</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:treeTable bean="#{treeTableExampleBean.treeTable}"
    columnWidths="100px,80px,60px,50px,120px,6S0px,80px"
    levelColors="#FFE900,#FFF04F,#FFF79F,#FFFCDF">
    <ice-cc:treeTableColumn header="Organization">
        <ice:outputText value="#{row.data}" rendered="#{row.level eq 0}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Region">
        <ice:outputText value="#{row.data}" rendered="#{row.level eq 1}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="City">
        <ice:outputText value="#{row.data}" rendered="#{row.level eq 2}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Name">
        <ice:outputText value="#{row.data}" rendered="#{row.data.class.simpleName eq 'Employee'}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Phone">
        <ice:outputText value="#{row.data.phone}" rendered="#{row.data.class.simpleName eq 'Employee'}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Born">
        <ice:outputText value="#{row.data.birthDate}" rendered="#{row.data.class.simpleName eq 'Employee'}">
        	<f:convertDateTime dateStyle="medium"/>
        </ice:outputText>
    </ice-cc:treeTableColumn>
</ice-cc:treeTable>
     ]]></example>
        <attribute>
            <name>header</name>
            <required>false</required>
            <description><![CDATA[
        The header title for the column
      ]]></description>
        </attribute>
        <attribute>
            <name>styleClassHeader</name>
            <required>false</required>
            <description>Passed through to styleClass attribute of header
                ice:outputText component
            </description>
        </attribute>
        <attribute>
            <name>styleHeader</name>
            <required>false</required>
            <description>Passed through to style attribute of header
                ice:outputText component
            </description>
        </attribute>
        <attribute>
            <name>nospanHeader</name>
            <required>false</required>
            <description>Passed through to nospan attribute of header
                ice:outputText component
            </description>
        </attribute>
        <attribute>
            <name>escapeHeader</name>
            <required>false</required>
            <description>Passed through to escape attribute of header
                ice:outputText component
            </description>
        </attribute>
        <attribute>
            <name>effectContainer</name>
            <required>false</required>
            <description>Passed through to effect attribute on ice:panelGroup
                component containing content
            </description>
        </attribute>
        <attribute>
            <name>styleClassContainer</name>
            <required>false</required>
            <description>Passed through to styleClass attribute on
                ice:panelGroup component containing content
            </description>
        </attribute>
    </tag>

    <tag>
        <description><![CDATA[
	<h2>The Drag and Drop Tree Table Composite Component</h2>
	Renders a tabular version of a tree model
	where node can be re-positioning in the tree, by being dragged to other branches
       <h3>Features</h3>
       <ul>
       		 <li>The Tree Table is driven by standard Swing TreeModel</li>
         <li>The Tree Table nodes can be expanded and collapsed by clicking
             on the folder icons
         </li>
         <li>Dynamic changes to the TreeModel and automatically shown in
             the Tree Table
         </li>
         <li>Tree Tables rows display color-coding according to the
             level in the TreeModel
         </li>
         <li>Tree nodes can be dragged by clicking and dragging the folder or page icon to another folder
         	<ul>
         		<li>Click and hold on an icon</li>
         		<li>Drag the icon to onto another folder</li>
         		<li>The backing TreeModel will be automatically updated with the new structure</li>
         	</ul>
         </li>
       	</ul>
		<h3>How To Use</h3>
		<ol>
			   <li>Create an instance of the TreeTable class in your managed bean</li>
			   <li>Create the tree model from TreeTableNode objects</li>
			   <li>Use the dragAndDropTreeTable tag on your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
			   <li>Set the 'bean' attribute on the tag</li>
			   <li>Add as many treeTableColumns as you would like in your table</li>
			   <li>For each treeTableColumn you may use any other component and reference row-level properties through the 'row' variable name</li>
 		</ol>
    ]]></description>
        <display-name>Drag and Drop Tree Table Composite Component
        </display-name>
        <name>dragAndDropTreeTable</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:dragAndDropTreeTable bean="#{treeTableExampleBean.treeTable}"
    columnWidths="100px,80px,60px,50px,120px,6S0px,80px"
    levelColors="#FFE900,#FFF04F,#FFF79F,#FFFCDF">
    <ice-cc:treeTableColumn header="Organization">
        <ice:outputText value="#{row.data}" rendered="#{row.level eq 0}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Region">
        <ice:outputText value="#{row.data}" rendered="#{row.level eq 1}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="City">
        <ice:outputText value="#{row.data}" rendered="#{row.level eq 2}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Name">
        <ice:outputText value="#{row.data}" rendered="#{row.data.class.simpleName eq 'Employee'}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Phone">
        <ice:outputText value="#{row.data.phone}" rendered="#{row.data.class.simpleName eq 'Employee'}"/>
    </ice-cc:treeTableColumn>
    <ice-cc:treeTableColumn header="Born">
        <ice:outputText value="#{row.data.birthDate}" rendered="#{row.data.class.simpleName eq 'Employee'}">
        	<f:convertDateTime dateStyle="medium"/>
        </ice:outputText>
    </ice-cc:treeTableColumn>
</ice-cc:dragAndDropTreeTable>

     ]]></example>
        <attribute>
            <name>bean</name>
            <type>com.icesoft.faces.facelets.component.treetable.TreeTable
            </type>
            <required>true</required>
            <description><![CDATA[
        The bean attribute must resolve to an instance of the TreeTable class.
      ]]></description>
        </attribute>
        @COLUMNWIDTHS_ATTR
        <attribute>
            <name>levelColors</name>
            <required>false</required>
            <description><![CDATA[
        A comma-delimited list of color codes for each level in the tree
      ]]></description>
        </attribute>
        <attribute>
            <name>lineImage</name>
            <required>false</required>
            <description>Passed through to ice:graphicImage component
            </description>
        </attribute>
        <attribute>
            <name>nodeImage</name>
            <required>false</required>
            <description>Passed through to ice:graphicImage component
            </description>
        </attribute>
        <attribute>
            <name>closeImage</name>
            <required>false</required>
            <description>Passed through to ice:commandButton component
            </description>
        </attribute>
        <attribute>
            <name>openImage</name>
            <required>false</required>
            <description>Passed through to ice:commandButton component
            </description>
        </attribute>
        <attribute>
            <name>effect</name>
            <required>false</required>
            <description>Passed through to effect attribute on ice:panelGroup
                component containing content
            </description>
        </attribute>
        <attribute>
            <name>styleContainer</name>
            <required>false</required>
            <description>Passed through to style attribute on ice:panelGroup
                component containing content
            </description>
        </attribute>
        <attribute>
            <name>styleClassContainer</name>
            <required>false</required>
            <description>Passed through to styleClass attribute on
                ice:panelGroup component containing content
            </description>
        </attribute>
    </tag>

    <!-- TRI STATE CHECKBOX -->

    <tag>
        <description><![CDATA[
<h2>Tri State Checkbox Composite Component.</h2>
       <h3>Features</h3>
<ul>
  <li>The Tri State Checkbox has 3 associated states
      <ul>
          <li>Unchecked</li>
          <li>Partially Checked</li>
          <li>Checked</li>
      </ul>
  </li>
  <li>You can define the order of state-change. The default order is unchecked -> partially checked -> checked</li>
</ul>
<h3>How To Use</h3>
		<ol>
		    <li>Create an instance of the SelectPartialCheckbox class in your managed bean</li>
		    <li>Add the &lt;ice-cc:triStateCheckboxcss/&gt; tag to your page.  Nest &lt;ice-cc:css/&gt; in your page &lt;head&gt; tag.</li>
		    <li>Bind the bean attribute on the tag to your managed bean property (eg. bean="#{myBean.checkbox})</li>
		</ol>
    ]]></description>
        <display-name>Tri State Checkbox</display-name>
        <name>triStateCheckbox</name>
        <tag-class>javax.faces.webapp.UIComponentTag</tag-class>
        <body-content></body-content>
        <example><![CDATA[
<ice-cc:triStateCheckbox id="uniqueId"
	bean="#{bean}"/>
     ]]></example>
        @ID_ATTR
        <attribute>
            <name>bean</name>
            <type>
                com.icesoft.faces.facelets.component.tristatecheckbox.TriStateCheckbox
            </type>
            <required>true</required>
            <description><![CDATA[
        The bean attribute must resolve to an instance of the TriStateCheckbox class.
      ]]></description>
        </attribute>
        <attribute>
            <name>disabled</name>
            <type>java.lang.boolean</type>
            <required>false</required>
            <description>Passed through to ice:commandButton</description>
        </attribute>
        <attribute>
            <name>styleContainer</name>
            <required>false</required>
            <description>Passed through to style attribute on container
            </description>
        </attribute>
        <attribute>
            <name>styleButton</name>
            <required>false</required>
            <description>Passed through to style attribute on ice:commandButton
            </description>
        </attribute>
        <attribute>
            <name>alt</name>
            <required>false</required>
            <description>Passed through to ice:commandButton</description>
        </attribute>
        <attribute>
            <name>title</name>
            <required>false</required>
            <description>Passed through to ice:commandButton</description>
        </attribute>
        <attribute>
            <name>effect</name>
            <required>false</required>
            <description>Passed through to ice:commandButton</description>
        </attribute>
    </tag>

</taglib>

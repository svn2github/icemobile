<!--
 * Copyright 2004-2012 ICEsoft Technologies Canada Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS
 * IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
  -->

<project name="icemobile-jsp" default="all" basedir=".">

    <property file="local.properties"/>
    <property file="../build.properties"/>
    <property file="build.properties"/>
    <property name="root.offset" value=".."/>
    <property name="java.dir" location="src/main/java"/>
    <property name="resources.dir" location="src/main/resources"/>
    <property file="${root.offset}/build.properties"/>
    <property name="product.info" value="org/icemobile/ProductInfo.java"/>
    <property name="jar.file.name" value="${ant.project.name}.jar"/>
    <!-- common theme location  -->
    <property name="theme.dir" location="../resources/themes"/>

    <!-- them location in jar  -->
    <property name="theme.resources.dir"
              location="${resources.dir}/META-INF/web-resources/org.icefaces.component.skins"/>

    <import file="../resources/build/build.xml"/>

    <target name="product.info" description="update product information">
        <!-- <buildnumber/>  -->
        <copy file="conf/${product.info}"
              tofile="${java.dir}/${product.info}"
              overwrite="true"/>
        <replace file="${java.dir}/${product.info}">
            <replacefilter token="@company@" value="${company}"/>
            <replacefilter token="@product@" value="${product}"/>
            <replacefilter token="@release.type@" value="${release.type}"/>
            <replacefilter token="@version.primary@"
                           value="${version.primary}"/>
            <replacefilter token="@version.secondary@"
                           value="${version.secondary}"/>
            <replacefilter token="@version.tertiary@"
                           value="${version.tertiary}"/>
            <replacefilter token="@build.number@" value="${build.number}"/>
            <replacefilter token="@revision@" value="${revision}"/>
        </replace>

    </target>

    <target name="clean.product.info">
        <delete file="${java.dir}/${product.info}" failonerror="no"/>
    </target>

    <target name="pre.compile" description="prepare for compilation"
            depends="clean">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/classes"/>
        <mkdir dir="${dist.dir}"/>
    </target>

    <target name="compile" depends="pre.compile, product.info"
            description="compile classes">
        <compile/>
    </target>

    <target name="init-skip-css-properties"
            description="Test theme source dates against last successful run to avoid unnecessary work">
        <uptodate targetfile="${build.dir}/skins/in/skins.done"
                  property="skins.skip">
            <srcfiles dir="${theme.dir}" includes="**/*.css"/>
        </uptodate>
        <echo message="Skip CSS: ${skins.skip}"/>
    </target>

    <target name="skins" depends="init-skip-css-properties"
            unless="skins.skip">
        <!-- create staging area for skins -->
        <mkdir dir="${build.dir}/skins/in"/>
        <mkdir dir="${build.dir}/skins/out"/>

        <!-- copy all the theme data over the resources folder -->
        <!-- Copy all resources to the skins resource library -->
        <copy todir="${build.dir}/skins/in">
            <fileset dir="${theme.dir}" includes="**"/>
        </copy>
        <copy todir="${build.dir}/skins/out">
            <fileset dir="${theme.dir}" excludes="**/*.css" />
        </copy>
        <!-- concatenate -->
        <!-- Generate a single CSS file per skin -->
        <concatskin name="android" inputdir="${build.dir}/skins/in"
                    outputdir="${build.dir}/skins/out"/>
        <concatskin name="honeycomb" inputdir="${build.dir}/skins/in"
                    outputdir="${build.dir}/skins/out"/>
        <concatskin name="iphone" inputdir="${build.dir}/skins/in"
                    outputdir="${build.dir}/skins/out"/>
        <concatskin name="bberry" inputdir="${build.dir}/skins/in"
                    outputdir="${build.dir}/skins/out"/>
        <concatskin name="ipad" inputdir="${build.dir}/skins/in"
                    outputdir="${build.dir}/skins/out"/>

        <!-- compress -->
        <ant target="compress-css"/>

        <!-- copy over to resources folder for jar creation. -->
        <copy todir="${theme.resources.dir}">
            <fileset dir="${build.dir}/skins/out" includes="**"/>
        </copy>
        <touch file="${build.dir}/skins/in/skins.done"/>
    </target>

    <target name="compress-css"
            unless="no-compress">
        <compresscss name="iphone"/>
        <compresscss name="ipad"/>
        <compresscss name="android"/>
        <compresscss name="honeycomb"/>
        <compresscss name="bberry"/>
    </target>

    <macrodef name="compresscss">
        <attribute name="name"/>
        <sequential>
            <yui-compressor name="@{name}"
                            inputDir="${build.dir}/skins/out/@{name}"
                            outputDir="$${build.dir}/skins/out/@{name}"/>
        </sequential>
    </macrodef>


    <target name="all" depends="jar" description="build all">
    </target>

    <target name="jar" depends="compile, skins" description="fill the jar">
        <jar destfile="${dist.dir}/${jar.file.name}" duplicate="fail">
            <fileset dir="${build.dir}/classes">
                <include name="**/*"></include>
            </fileset>
            <fileset dir="${resources.dir}">
                <include name="**/*"></include>
            </fileset>
            <fileset dir="${java.dir}" includes="**/*.java"/>
            <manifest>
                <section name="${groupId}">
                    <attribute name="Implementation-Title"
                               value="${product}"/>
                    <attribute name="Implementation-Version"
                               value="${version.string}"/>
                    <attribute name="Build-Number"
                               value="${build.number}"/>
                    <attribute name="Build-Time"
                               value="${build.time}"/>
                    <attribute name="Implementation-Vendor"
                               value="${company}"/>
                </section>
            </manifest>
        </jar>
        <antcall target="clean.product.info"/>

        <copy file="${dist.dir}/${jar.file.name}" todir="${lib.dir}"
              overwrite="true"/>

    </target>

    <macrodef name="compile">
        <attribute name="src.copy.excludes" default="**/*.java"/>
        <attribute name="failonerror" default="true"/>
        <attribute name="src.javac.excludes" default=""/>
        <attribute name="compile.target" default="1.5"/>
        <attribute name="compile.source" default="1.5"/>
        <attribute name="compile.debug" default="true"/>
        <attribute name="compile.debuglevel" default="lines,vars,source"/>
        <attribute name="src.dir" default="${java.dir}"/>

        <element name="add.javac.elements" optional="true"/>
        <element name="add.classpath.elements" optional="true"/>

        <sequential>
            <echo>Compiling ${ant.project.name}...</echo>
            <mkdir dir="${java.dir}"/>
            <mkdir dir="${build.dir}/classes"/>

            <javac destdir="${classes.dir}" sourcepath=""
                   source="@{compile.source}"
                   target="@{compile.target}"
                   debug="@{compile.debug}"
                   debuglevel="@{compile.debuglevel}"
                   failonerror="@{failonerror}">

                <src location="@{src.dir}"/>
                <include name="**/*.java"/>
                <exclude name="@{src.javac.excludes}"/>
                <classpath>
                    <fileset dir="${lib.dir}"/>
                    <add.classpath.elements/>
                </classpath>
                <add.javac.elements/>

            </javac>

            <copy todir="${build.dir}/classes" preservelastmodified="true">
                <fileset dir="${java.dir}" excludes="@{src.copy.excludes}"/>
            </copy>

        </sequential>
    </macrodef>

    <macrodef name="clean">
        <element name="add.filesets" optional="true"/>
        <sequential>
            <delete failonerror="false" includeEmptyDirs="true">
                <fileset dir="${build.dir}"/>
                <fileset dir="${dist.dir}"/>
                <add.filesets/>
            </delete>
        </sequential>
    </macrodef>

    <target name="clean">
        <echo>Cleaning ${ant.project.name}...</echo>
        <clean/>
        <!-- clean the theme folder from resources -->
        <delete failonerror="false" includeEmptyDirs="true">
            <fileset dir="${theme.resources.dir}"/>
        </delete>
    </target>

</project>

